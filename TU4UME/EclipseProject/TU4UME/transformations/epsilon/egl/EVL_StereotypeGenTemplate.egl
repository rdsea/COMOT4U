[%
var ownedAttributes = stereo.getOwnedAttributes();
var allAttributes = stereo.getAllAttributes();
var profile = stereo.containingProfile();
var profiles = Profile.all;

//We need all the stereotypes. Optimization possible 
var stereotypes = Stereotype.all;

//We need all the stereotypes. Optimization possible 
var enumerations = Enumeration.all;

var metaclasses = stereo.getAllExtendedMetaclasses();
var attributes = stereo.getAllAttributes();
var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
var UMLUtil = plugin.getUMLUtil();
var baseElement = UMLUtil.getBaseElement(stereo);
//var name = baseElement.getName();
//var applicableStereotypes = baseElement.getApplicableStereotypes();
//var attribute_names = virtual_sensor.getAllAttributeNamesOfVirtualSensor();
	
	//get all properties
%]
/*
Autogenerated Uncertainty Detection Rule (UDR).
The UDR aims at detecting potential infrastructural uncertainties caused by missing
information on UML Model.

This rule check the following stereotype: 
[%=stereo.getQualifiedName%]. 

[%=stereo.getName()%] defines the following properties:
[%
for (attr in allAttributes) { 
	if (not attr.getName().startsWith("base_")) {
%]
-	[%=attr.getQualifiedName()%]
[%		
	}
}
%]
*/
//libraries

import "../../../../../eol/library/gen/profiles/CoreProfile.eol";
import "../../../../../eol/library/gen/profiles/Ecore.eol";
import "../../../../../eol/library/gen/profiles/InfrastructureCPSProfile.eol";
import "../../../../../eol/library/gen/profiles/InfrastructureUncertaintyProfile.eol";

//import "../../../../../eol/library/gen/stereotypes/[%=stereo.getOwner().getName()%]/[%=stereo.name%].eol";

pre {
var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
var UMLUtil = plugin.getUMLUtil();
var ModelerAgent = plugin.getModelerAgent();
var coreProfile = Profile.all.selectOne(s|s.name = "CoreProfile");
var infrastructureCPSProfile = Profile.all.selectOne(s|s.name = "InfrastructureCPSProfile");
var infrastructureUncertaintyProfile = Profile.all.selectOne(s|s.name = "InfrastructureUncertaintyProfile");
var internalUProfileLibraryProfile = Profile.all.selectOne(s|s.name = "Internal U-Profile Library");

//enumeration variables
[%
for (elem in enumerations) {
	var ownerModel = elem.getOwner();
	if (ownerModel.getName() = "InfrastructureUncertaintyProfile" ) {
%]
//enumeration [%=elem.getName()%]
[%	
		var literals = elem.getOwnedLiterals();
		var name = elem.getName();
		//(name).println();
		//(literals).println();
%]
	var [%=elem.getName().firstToLowerCase()%]Enumeration = Enumeration.all.selectOne(s|s.name = "[%=elem.getName()%]");
[%	
		for (literal in literals) { 
%]
		var [%=elem.getName().firstToLowerCase()%]_[%=literal.getName()%]Literal = "[%=literal.getName()%]";
[%		
		}
	}
	if (ownerModel.getName() = "Internal U-Profile Library" ) {
%]
//enumeration [%=elem.getName()%]
[%	
		var literals = elem.getOwnedLiterals();
		var name = elem.getName();
		//(name).println();
		//(literals).println();
%]
	var [%=elem.getName().firstToLowerCase()%]Enumeration = Enumeration.all.selectOne(s|s.name = "[%=elem.getName()%]");
[%	
		for (literal in literals) { 
%]
		var [%=elem.getName().firstToLowerCase()%]_[%=literal.getName()%]Literal = "[%=literal.getName()%]";
[%		
		}
	}
}
%]
	
}
context [%=stereo.name%] {
[%

for (attribute in attributes) { 
	if (attribute.type.isDefined()){
		var primitive_type = attribute.type.name;
		//(primitive_type).println;
		//(primitive_type.asString() <> "String" ).println;
			if (not attribute.name.startsWith("base_") 
				and primitive_type.asString() <> "Boolean" 
				and primitive_type.asString() <> "Integer"
				and primitive_type.asString() <> "String") {
%]	
	critique [%=attribute.name%]Specification {
	
		guard: self.[%=attribute.name%].isKindOf(Collection)
		
		check {
			var baseElement = UMLUtil.getBaseElement(self);
			return not self.[%=attribute.name%].isEmpty();
		}
[%

%]		
		message: "Constraint [%=attribute.name%]CollectionIsDefined failed on [%=stereo.name%] "+ baseElement.getName() +". It causes this uncertainty bla bla bla"		

		fix {
			title : "Create Infrastructure Uncertainty State to " + baseElement.getName()
			do {
				var statemachine = ModelerAgent.createStateMachine(baseElement);
	    		var region = ModelerAgent.createRegion(statemachine, statemachine.getName().concat("_region"));
	    		var init_state = ModelerAgent.createInitialState(statemachine, "Init");
	    		var end_state = ModelerAgent.createFinalState(statemachine, "End");
	    		var state = ModelerAgent.createState(region, "UncertaintyAffectedState");
	    		var t_init_state = ModelerAgent.createTransition(statemachine, init_state, state, init_state.getName().concat("_").concat(state.getName()));
	    		var t_state_end = ModelerAgent.createTransition(statemachine, state, end_state, state.getName().concat("_").concat(end_state.getName()));
				
				var appliedStereotypes = null;
				var indeterminacySourceStereotype = coreProfile.getIndeterminacySourceStereotype();
				var infrastructureLevelUncertaintyStereotype = infrastructureUncertaintyProfile.getInfrastructureLevelUncertaintyStereotype();
				
				appliedStereotypes = state.getAppliedStereotypes();
				if(not appliedStereotypes.includes(infrastructureLevelUncertaintyStereotype)){
					ModelerAgent.applyStereotype (state, infrastructureLevelUncertaintyStereotype);
				}

				appliedStereotypes = baseElement.getAppliedStereotypes();
				if(not appliedStereotypes.includes(indeterminacySourceStereotype)){
					//the indeterminacySource is the model element itself that is potentially incomplete
					ModelerAgent.applyStereotype (baseElement, indeterminacySourceStereotype);				
				}
				
				//stereotypes are correctly applied and this point
				//properties can be set/overridden.
				
				//setting the nature of the indeterminacy source
				ModelerAgent.setStereotypePropertyValue(baseElement, indeterminacySourceStereotype, indeterminacySourceStereotype.getNatureProperty(), indeterminacyNature_MissingInfoLiteral);

				//assigning the indeterminacySource to the detected infrastructure uncertainty
				ModelerAgent.setStereotypePropertyValue(state, infrastructureLevelUncertaintyStereotype, infrastructureLevelUncertaintyStereotype.getIndeterminacySourceProperty(), baseElement);
			}
		}
	}

	critique [%=attribute.name%]Specification {
	
		guard: not self.[%=attribute.name%].isKindOf(Collection)
		
		check {
			var baseElement = UMLUtil.getBaseElement(self);
			return not self.[%=attribute.name%].isEmpty();
		}		
		message: "Constraint [%=attribute.name%]IsDefined failed on [%=stereo.name%] "+ baseElement.getName() +". It causes this uncertainty bla bla bla"		

		fix {
			title : "Create Infrastructure Uncertainty State to " + baseElement.getName()
			do {
				var statemachine = ModelerAgent.createStateMachine(baseElement);
	    		var region = ModelerAgent.createRegion(statemachine, statemachine.getName().concat("_region"));
	    		var init_state = ModelerAgent.createInitialState(statemachine, "Init");
	    		var end_state = ModelerAgent.createFinalState(statemachine, "End");
	    		var state = ModelerAgent.createState(region, "UncertaintyAffectedState");
	    		var t_init_state = ModelerAgent.createTransition(statemachine, init_state, state, init_state.getName().concat("_").concat(state.getName()));
	    		var t_state_end = ModelerAgent.createTransition(statemachine, state, end_state, state.getName().concat("_").concat(end_state.getName()));
				
				var appliedStereotypes = null;
				
				appliedStereotypes = state.getAppliedStereotypes();
				if(not appliedStereotypes.includes(infrastructureUncertaintyProfile.getInfrastructureLevelUncertaintyStereotype())){
					ModelerAgent.applyStereotype (state, infrastructureUncertaintyProfile.getInfrastructureLevelUncertaintyStereotype());
				}

				appliedStereotypes = baseElement.getAppliedStereotypes();
				if(not appliedStereotypes.includes(coreProfile.getIndeterminacySourceStereotype())){
					//the indeterminacySource is the model element itself that is potentially incomplete
					ModelerAgent.applyStereotype (baseElement, coreProfile.getIndeterminacySourceStereotype());				
				}
				
				//setting the nature of the indeterminacy source
				ModelerAgent.setStereotypePropertyValue(baseElement, indeterminacySourceStereotype, indeterminacyNatureProperty, indeterminacyNature_MissingInfoLiteral);

				//assigning the indeterminacySource to the detected infrastructure uncertainty
				ModelerAgent.setStereotypePropertyValue(sm, infrastructureLevelUncertaintyStereotype, indeterminacySourceProperty, baseElement);
			}
		}
	}
[%	
		}
	}
}
%]	
}



