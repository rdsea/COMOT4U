[%
var literals = enum.getOwnedLiterals() ;
var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
var plugin_id = "at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool";
var UMLUtil = plugin.getUMLUtil();

%]
package at.ac.tuwien.dsg.uml.profiles.infrastructurecpsprofile.enumerations.pojos;

/************************************
This POJO Java class is automatically generated from the [%=enum.name.firstToUpperCase()%] enumeration
using EPSILON framework.
The corresponding EPSILON type is
[%=enum.type()%]
[%=UMLUtil.getQualifiedText(enum.type())%]
This class provide a toJson method that serialize objects of this class in JSON using the GSON Library
************************************/

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.util.ArrayList;
import java.util.List;
import [%=plugin_id%];

public class [%=enum.name.firstToUpperCase()%] {

[%
for (literal in literals) { 

	if(not literal.name.startsWith("base_"))
	{ 
	var type = literal.type().toString();
	(type).println();

%]

		
	/*
	Static Variable for the literal [%=literal.name%].
	*/ 
	public String _[%=literal.name%] = new String("[%=literal.name%]");
	
[%
	}
}
%]
	/*
	Variable __type with the name of the stereotype
	*/ 
	private final String __type = new String ("[%=enum.name.firstToUpperCase()%]");

	public [%=enum.name.firstToUpperCase()%]() {
	}


	public static void main(String[] args) {
		// TODO Auto-generated method to test the [%=enum.name%] POJO class
		
		[%=enum.name%] enumeration = new [%=enum.name.firstToUpperCase()%]();
		enumeration.toJson();
		
	}
	
	public String toJson(){
	

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        
        // Convert numbers array into JSON string.
        String elem = gson.toJson(this);
        
        System.out.println("elem = " + elem);    
        
        return elem;   
	}

[%
for (literal in literals) { 

	if(not literal.name.startsWith("base_"))
	{ 
%]
	/**
	 * @return the _[%=literal.name%]
	 */
	public String get[%=literal.name.firstToUpperCase()%]() {
		return _[%=literal.name%];
	}
[%
	}
}
%]
}