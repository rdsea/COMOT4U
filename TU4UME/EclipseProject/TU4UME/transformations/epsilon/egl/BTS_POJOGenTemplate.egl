[%
//*************************************************
// This template generate a JSON representation of the IoT Clound infrastructure architecture
// The template uses EOL libraries. We have distinct libraries for each stereotype of the applied profiles.
// UML Model elements can be managed by Eclipse UML API. Therefore operations not defined in EOL libraries
// are native operations from the Eclipse UML API.
//*************************************************

//*****************COMMMENTS**********************
// We plan to generate the EGL file automatically with higher order transformations,
// i.e., a EGL file that generate the this EGL template by acccessing the generated EOL library for stereotypes.
//*************************************************

//*****************COMMMENTS**********************
// We plan to reuse the GSON library to as JSON emitter. It can be done by setting up a pretty printer using
// GSON API. However, this choice can further complicate the emitter template with additional statements that
// are in contrast with the declarative nature of a EPSILON EGL templates.
// Indeed GSON can be directly invoked only at finest grain. 
// Invoking GSON on bigger variables. For example, the second statement below
//
// var virtual_gateways = aPackage.VirtualGatewaysAsSequenceOfClass();
// var virtual_gateways_json = aPackage.JSONVirtualGatewaysAsSequenceOfClass();
//
// generate only the EPSILON interal string representation of a Sequence 
// (see stereotype library generation template)
// 
// while we need to further elaborate data obtained from EPSILON execution within EGL files
// that can be considered pretty printer templates.
// Therefore using EGL and GSON API at the finest grain are alternative solutions. 
//*************************************************


//****************EOL LIBRARIES*********************
//Libraries from /gen folder are generated via EGL templates that generate EOL files.
//Operations from utestlibrary.eol are deprecated but still necessary
//Libraries connect to native objects from external APIs like EclipseUML and Google GSON
//*************************************************



import "../eol/utest/utestlibrary.eol";
import "../eol/library/gen/profiles/InfrastructureCPSProfile.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/VirtualSensor.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/VirtualActuator.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/VirtualGateway.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/Communication.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/VirtualUnit.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/Unit.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/SoftwareDefinedCapability.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/CloudService.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/StorageConfiguration.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/ComputingConfiguration.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/CommunicationConfiguration.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/CloudProvider.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/TestConfiguration.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/Actuator.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/Sensor.eol";
import "../eol/library/gen/stereotypes/InfrastructureCPSProfile/SoftwareDefinedMetric.eol";
import "../eol/library/gen/enumerations/InfrastructureCPSProfile/ProtocolType.eol";

//*************************************************

//*************************************************
// Global variables
//*************************************************
var showEmpty = true;

var virtual_units = aPackage.VirtualUnitsAsSequenceOfClass();

//only of type VirtualActuator no supertypes or subtypes
var virtual_actuators = aPackage.VirtualActuatorsAsSequenceOfClass();

//only of type Actuator no supertypes or subtypes
var actuators = aPackage.ActuatorsAsSequenceOfClass();

//only of type VirtualSensor no supertypes or subtypes	
var virtual_sensors = aPackage.VirtualSensorsAsSequenceOfClass();
for (iterator in virtual_sensors) { 
	(iterator).println();
}
//only of type Sensor no supertypes	or subtypes
var sensors = aPackage.SensorsAsSequenceOfClass();
for (iterator in sensors) { 
	(iterator).println();
}
//only of type VirtualGateway no supertypes	or subtypes
var virtual_gateways = aPackage.VirtualGatewaysAsSequenceOfClass();

//only of type Communication no supertypes or subtypes
var communications = aPackage.CommunicationsAsSequenceOfAssociation();

//only of type CloudService no supertypes or subtypes
var cloud_services = aPackage.CloudServicesAsSequenceOfClass();

//only of type Test Configurations no supertypes or subtypes
var test_configurations = aPackage.TestConfigurationsAsSequenceOfClass();

//only of type Communication Configurations no supertypes or subtypes
var communication_configurations = aPackage.CommunicationConfigurationsAsSequenceOfClass();

//only of type Storage Configurations no supertypes or subtypes
var storage_configurations = aPackage.StorageConfigurationsAsSequenceOfClass();

//only of type Computing Configurations no supertypesor subtypes
var computing_configurations = aPackage.ComputingConfigurationsAsSequenceOfClass();

//all units	of any type as Set then no duplicates, not ordered
//deprecated
var allUnits = Unit.all.asSet();
	
%]
package at.ac.tuwien.dsg.tu4ume.java.systemmodels.bts.classes;

import at.ac.tuwien.dsg.uml.profiles.infrastructurecpsprofile.stereotypes.pojos.*;
import at.ac.tuwien.dsg.uml.profiles.marte.stereotypes.pojos.*;
import at.ac.tuwien.dsg.uml.profiles.marte.enumerations.pojos.*;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.util.ArrayList;
import java.util.List;
import at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool;


public class  [%=aPackage.name.replaceAll("\\s+","")%]{

	//*************************************************
	// Global variables
	//*************************************************
	private boolean showEmpty = true;
	private List<Object> all_pojos = new ArrayList<Object>();
	private List<Object> all_virtual_sensors = new ArrayList<Object>();
	private List<Object> all_virtual_gateways = new ArrayList<Object>();
	private List<Object> all_virtual_actuators = new ArrayList<Object>();
	private List<Object> all_sensors = new ArrayList<Object>();
	private List<Object> all_actuators = new ArrayList<Object>();
	private List<Object> all_communications = new ArrayList<Object>();
	private List<Object> all_communication_configurations = new ArrayList<Object>();
	private List<Object> all_computing_configurations = new ArrayList<Object>();
	private List<Object> all_storage_configurations = new ArrayList<Object>();
	private List<Object> all_cloud_services = new ArrayList<Object>();

	private List<Object> all_pojos_wrapper = new ArrayList<Object>();
	private List<Object> all_virtual_sensors_wrapper = new ArrayList<Object>();
	private List<Object> all_virtual_gateways_wrapper = new ArrayList<Object>();
	private List<Object> all_virtual_actuators_wrapper = new ArrayList<Object>();
	private List<Object> all_sensors_wrapper = new ArrayList<Object>();
	private List<Object> all_actuators_wrapper = new ArrayList<Object>();
	private List<Object> all_communications_wrapper = new ArrayList<Object>();
	private List<Object> all_communication_configurations_wrapper = new ArrayList<Object>();
	private List<Object> all_computing_configurations_wrapper = new ArrayList<Object>();
	private List<Object> all_storage_configurations_wrapper = new ArrayList<Object>();
	private List<Object> all_cloud_services_wrapper = new ArrayList<Object>();
	
	public static void main(String[] args) {

		[%=aPackage.name.replaceAll("\\s+","")%] [%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%] = new [%=aPackage.name.replaceAll("\\s+","")%]();



//*************************************************
//test_configurations
//*************************************************
[%  
	var test_configurations_counter = 1;  
    for(elem in test_configurations){
    
%]
		//TestConfiguration test_configuration_[%=elem.name%]_[%=test_configurations_counter%] = new TestConfiguration();
		//[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(test_configuration_[%=elem.name%]_[%=test_configurations_counter%]);
[% 
		test_configurations_counter++;
	}
%]

//*************************************************
//Cloud Services
//*************************************************



[%   
//*************************************************
//cloud_services
//*************************************************
	var cloud_services_counter = 1;  
    for(elem in cloud_services){
    
%]

//*************************************************
//Cloud Service [%=elem.name%]
//*************************************************
		CloudService cloud_service_[%=elem.name%]_[%=cloud_services_counter%] = new CloudService();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(cloud_service_[%=elem.name%]_[%=cloud_services_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_cloud_services.add(cloud_service_[%=elem.name%]_[%=cloud_services_counter%]);
		
		CloudServiceWrapper cloud_service_[%=elem.name%]_[%=cloud_services_counter%]_wrapper = new CloudServiceWrapper();		
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(cloud_service_[%=elem.name%]_[%=cloud_services_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_cloud_services_wrapper.add(cloud_service_[%=elem.name%]_[%=cloud_services_counter%]_wrapper);
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%]_wrapper.setCloudService(cloud_service_[%=elem.name%]_[%=cloud_services_counter%]);

[%    
		var name_value = null;
		var id_value = null;
		
		var cloudprovider_stereo_applications = new Sequence; 
		var serviceType_stereo_applications = new Sequence; 
		var dataProvider_stereo_applications = new Sequence; 
		var computingConfigs_stereo_applications = new Sequence; 
		var storageConfigs_stereo_applications = new Sequence; 
		var communicationConfigs_stereo_applications = new Sequence;  
		
		var cloudprovider_value = new Sequence; 
		var serviceType_value = new Sequence; 
		var dataProvider_value = new Sequence; 
		var computingConfigs_value = new Sequence; 
		var storageConfigs_value = new Sequence; 
		var communicationConfigs_value = new Sequence;  
	
		var cloudprovider_baseElement = null; 
		var serviceType_baseElement = null; 
		var dataProvider_baseElement = null; 
		var computingConfigs_baseElement = null; 
		var storageConfigs_baseElement = null; 
		var communicationConfigs_baseElement = null; 
		
		     
    	name_value = elem.name; 
		id_value = elem.id; 
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addId("[%=elem.id%]");
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].setName("[%=elem.name%]");	
[%			
    	cloudprovider_stereo_applications = elem.getCloudProviderOfCloudServiceAsSequence();
		serviceType_stereo_applications = elem.getServiceTypeOfCloudServiceAsSequence();
		dataProvider_stereo_applications = elem.getDataProviderOfCloudServiceAsSequence();
		
		computingConfigs_stereo_applications = elem.getComputingConfigsOfCloudServiceAsSequence();
		storageConfigs_stereo_applications = elem.getStorageConfigsOfCloudServiceAsSequence();
		communicationConfigs_stereo_applications = elem.getCommunicationConfigsOfCloudServiceAsSequence(); 


		for (service_type_elem in serviceType_stereo_applications) {
			//(service_type_elem).println();
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addServiceType("[%=service_type_elem.name%]");
[%		
		}
		for (cloud_provider_elem in cloudprovider_stereo_applications) {
			(cloud_provider_elem).println();
			//cloudprovider_baseElement = cloud_provider_elem.getBaseElementOfCloudProvider();
			
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addCloudProvider("[%=cloudprovider_baseElement%]");
[%		
		}
		for (data_provider_elem in dataProvider_stereo_applications) {
			//(data_provider_elem).println();
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addDataProvider("[%=data_provider_elem%]");
[%		
		}
		for (computing_config_elem in computingConfigs_stereo_applications) {
			computingConfigs_baseElement = computing_config_elem.getBaseElementOfComputingConfiguration();
			//(computing_config_elem).println();
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addComputingConfigs("[%=computingConfigs_baseElement.getName()%]");
[%		
		}
		for (storage_config_elem in storageConfigs_stereo_applications) {
			storageConfigs_baseElement = storage_config_elem.getBaseElementOfStorageConfiguration();
			//(storage_config_elem).println();
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addStorageConfigs("[%=storageConfigs_baseElement.getName()%]");
[%		
		}
		for (communication_config_elem in communicationConfigs_stereo_applications) {
			//(storage_config_elem).println();
			communicationConfigs_baseElement = communication_config_elem.getBaseElementOfCommunicationConfiguration();
%]
		cloud_service_[%=elem.name%]_[%=cloud_services_counter%].addCommunicationConfigs("[%=communicationConfigs_baseElement.getName()%]");
[%		
		}
		
    	cloud_services_counter++; 	
	}
    %]

//*************************************************
//Virtual Sensors
//*************************************************



[%   
//*************************************************
//virtual_sensors
//*************************************************
	var virtual_sensors_counter = 1;  
    for(elem in virtual_sensors){
    
%]

//*************************************************
//Virtual Sensor [%=elem.name%]
//*************************************************
		VirtualSensor virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%] = new VirtualSensor();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_sensors.add(virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]);

		VirtualSensorWrapper virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]_wrapper= new VirtualSensorWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_sensors_wrapper.add(virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]_wrapper);

		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]_wrapper.setVirtualSensor(virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%]);

[%    
		var name_value = null;
		var id_value = null;
		
		var swCapabilities_stereo_applications = new Sequence; 
		var swMetrics_stereo_applications = new Sequence; 
		var virtualActuators_stereo_applications = new Sequence; 
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  
		var deployedOn_stereo_applications = new Sequence;  

		var swCapabilities_value = new Sequence; 
		var swMetrics_value = new Sequence; 
		var virtualActuators_value = new Sequence; 
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  
		var deployedOn_value = new Sequence;  

		var swCapabilities_baseElement = null; 
		var swMetrics_baseElement = null; 
		var virtualActuators_baseElement = null; 
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null;  
		var deployedOn_baseElement = null;  

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addId("[%=elem.id%]");
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		swCapabilities_stereo_applications = elem.getSwCapabilitiesOfVirtualSensorAsSequence(); 
		swMetrics_stereo_applications = elem.getSwMetricsOfVirtualSensorAsSequence();
		virtualActuators_stereo_applications = elem.getVirtualActuatorsOfVirtualSensorAsSequence(); 
		ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfVirtualSensorAsSequence(); 
		locations_stereo_applications = elem.getLocationOfVirtualSensorAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfVirtualSensorAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfVirtualSensorAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfVirtualSensorAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfVirtualSensorAsSequence();  
		deployedOn_stereo_applications = elem.getDeployedOnOfVirtualSensorAsSequence();  


		for (sw_capability_elem in swCapabilities_stereo_applications) {
			swCapabilities_baseElement = sw_capability_elem.getBaseElementOfSoftwareDefinedCapability();
			(sw_capability_elem).println();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addSwCapabilities("[%=swCapabilities_baseElement.getName()%]");
[%	
		}
		for (sw_metric_elem in swMetrics_stereo_applications) {
			swMetrics_baseElement = sw_metric_elem.getBaseElementOfSoftwareDefinedMetric();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addSwMetrics("[%=swMetrics_baseElement.getName()%]");
[%	
		}
		for (virtual_actuator_elem in virtualActuators_stereo_applications) {
			virtualActuators_baseElement = virtual_actuator_elem.getBaseElementOfVirtualActuator();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addVirtualActuators("[%=virtualActuators_baseElement.getName()%]");
[%	
		}
		for (owned_virtual_unit_elem in ownedVirtualUnits_stereo_applications) {
			ownedVirtualUnits_baseElement = owned_virtual_unit_elem.getBaseElementOfVirtualUnit();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addOwnedVirtualUnits("[%=ownedVirtualUnits_baseElement.getName()%]");
[%		
		}
		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}
		for (deployed_on_elem in deployedOn_stereo_applications) {
			deployedOn_baseElement = deployed_on_elem.getBaseElementOfSensor();
%]
		virtual_sensor_[%=elem.name%]_[%=virtual_sensors_counter%].addDeployedOn("[%=deployedOn_baseElement.getName()%]");
[%		
		}
    %]


    [%
    	virtual_sensors_counter++; 	
	}
    %]


//*************************************************
//Virtual Gateways
//*************************************************



[%   
//*************************************************
//virtual_gateways
//*************************************************
	var virtual_gateways_counter = 1;  
    for(elem in virtual_gateways){
    
%]

//*************************************************
//Virtual Gateway [%=elem.name%]
//*************************************************
		VirtualGateway virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%] = new VirtualGateway();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_gateways.add(virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]);

		VirtualGatewayWrapper virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]_wrapper = new VirtualGatewayWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_gateways_wrapper.add(virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]_wrapper);

		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]_wrapper.setVirtualGateway(virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%]);

[%    
		var name_value = null;
		var id_value = null;
		
		var swCapabilities_stereo_applications = new Sequence; 
		var swMetrics_stereo_applications = new Sequence; 
		var virtualActuators_stereo_applications = new Sequence; 
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  

		var swCapabilities_value = new Sequence; 
		var swMetrics_value = new Sequence; 
		var virtualActuators_value = new Sequence; 
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  

		var swCapabilities_baseElement = null; 
		var swMetrics_baseElement = null; 
		var virtualActuators_baseElement = null; 
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null;  

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addId("[%=elem.id%]");
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		//swMetrics_stereo_applications = elem.getSwMetricsOfVirtualGatewayAsSequence();
		virtualActuators_stereo_applications = elem.getVirtualActuatorsOfVirtualGatewayAsSequence(); 
		ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfVirtualGatewayAsSequence(); 
		locations_stereo_applications = elem.getLocationOfVirtualGatewayAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfVirtualGatewayAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfVirtualGatewayAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfVirtualGatewayAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfVirtualGatewayAsSequence();  


		for (virtual_actuator_elem in virtualActuators_stereo_applications) {
			virtualActuators_baseElement = virtual_actuator_elem.getBaseElementOfVirtualActuator();
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addVirtualActuators("[%=virtualActuators_baseElement.getName()%]");
[%	
		}
		for (owned_virtual_unit_elem in ownedVirtualUnits_stereo_applications) {
			ownedVirtualUnits_baseElement = owned_virtual_unit_elem.getBaseElementOfVirtualUnit();
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addOwnedVirtualUnits("[%=ownedVirtualUnits_baseElement.getName()%]");
[%		
		}
		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_gateway_[%=elem.name%]_[%=virtual_gateways_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}
			    
    %]


    [%
    	virtual_gateways_counter++; 	
	}
    %]

[%   
//*************************************************
//sensors
//*************************************************
	var sensors_counter = 1;  
    for(elem in sensors){
    
%]

//*************************************************
//Sensor [%=elem.name%]
//*************************************************
		Sensor sensor_[%=elem.name%]_[%=sensors_counter%] = new Sensor();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(sensor_[%=elem.name%]_[%=sensors_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_sensors.add(sensor_[%=elem.name%]_[%=sensors_counter%]);

		SensorWrapper sensor_[%=elem.name%]_[%=sensors_counter%]_wrapper = new SensorWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(sensor_[%=elem.name%]_[%=sensors_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_sensors_wrapper.add(sensor_[%=elem.name%]_[%=sensors_counter%]_wrapper);

		sensor_[%=elem.name%]_[%=sensors_counter%]_wrapper.setSensor(sensor_[%=elem.name%]_[%=sensors_counter%]);
[%    
		var name_value = null;
		var id_value = null;
		
		var swCapabilities_stereo_applications = new Sequence; 
		var swMetrics_stereo_applications = new Sequence; 
		var virtualActuators_stereo_applications = new Sequence; 
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  

		var swCapabilities_value = new Sequence; 
		var swMetrics_value = new Sequence; 
		var virtualActuators_value = new Sequence; 
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  

		var swCapabilities_baseElement = null; 
		var swMetrics_baseElement = null; 
		var virtualActuators_baseElement = null; 
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null;  

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addId("[%=elem.id%]");
		sensor_[%=elem.name%]_[%=sensors_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		//swCapabilities_stereo_applications = elem.getSwCapabilitiesOfSensorAsSequence(); 
		//swMetrics_stereo_applications = elem.getSwMetricsOfSensorAsSequence();
		//virtualActuators_stereo_applications = elem.getVirtualActuatorsOfSensorAsSequence(); 
		//ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfSensorAsSequence(); 
		locations_stereo_applications = elem.getLocationOfSensorAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfSensorAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfSensorAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfSensorAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfSensorAsSequence();  



		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		sensor_[%=elem.name%]_[%=sensors_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}
			    
    %]


    [%
    	sensors_counter++; 	
	}
    %]
    
[%
//*************************************************
//actuators
//*************************************************
	var actuators_counter = 1;  
    for(elem in actuators){
    
%]

//*************************************************
//Actuator [%=elem.name%]
//*************************************************
		Actuator actuator_[%=elem.name%]_[%=actuators_counter%] = new Actuator();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(actuator_[%=elem.name%]_[%=actuators_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_actuators.add(actuator_[%=elem.name%]_[%=actuators_counter%]);

		ActuatorWrapper actuator_[%=elem.name%]_[%=actuators_counter%]_wrapper = new ActuatorWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(actuator_[%=elem.name%]_[%=actuators_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_actuators_wrapper.add(actuator_[%=elem.name%]_[%=actuators_counter%]_wrapper);

		actuator_[%=elem.name%]_[%=actuators_counter%]_wrapper.setActuator(actuator_[%=elem.name%]_[%=actuators_counter%]);

[%    
		var name_value = null;
		var id_value = null;
		
		var swCapabilities_stereo_applications = new Sequence; 
		var swMetrics_stereo_applications = new Sequence; 
		var virtualActuators_stereo_applications = new Sequence; 
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  

		var swCapabilities_value = new Sequence; 
		var swMetrics_value = new Sequence; 
		var virtualActuators_value = new Sequence; 
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  

		var swCapabilities_baseElement = null; 
		var swMetrics_baseElement = null; 
		var virtualActuators_baseElement = null; 
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null;  

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addId("[%=elem.id%]");
		actuator_[%=elem.name%]_[%=actuators_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		swCapabilities_stereo_applications = elem.getSwCapabilitiesOfActuatorAsSequence(); 
		swMetrics_stereo_applications = elem.getSwMetricsOfActuatorAsSequence();
		virtualActuators_stereo_applications = elem.getVirtualActuatorsOfActuatorAsSequence(); 
		ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfActuatorAsSequence(); 
		locations_stereo_applications = elem.getLocationOfActuatorAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfActuatorAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfActuatorAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfActuatorAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfActuatorAsSequence();  


		for (sw_capability_elem in swCapabilities_stereo_applications) {
			swCapabilities_baseElement = sw_capability_elem.getBaseElementOfSoftwareDefinedCapability();
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addSwCapabilities("[%=swCapabilities_baseElement.getName()%]");
[%	
		}
		for (sw_metric_elem in swMetrics_stereo_applications) {
			swMetrics_baseElement = sw_metric_elem.getBaseElementOfSoftwareDefinedMetric();
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addSwMetrics("[%=swMetrics_baseElement.getName()%]");
[%	
		}
		for (virtual_actuator_elem in virtualActuators_stereo_applications) {
			virtualActuators_baseElement = virtual_actuator_elem.getBaseElementOfVirtualActuator();
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addVirtualActuators("[%=virtualActuators_baseElement.getName()%]");
[%	
		}
		for (owned_virtual_unit_elem in ownedVirtualUnits_stereo_applications) {
			ownedVirtualUnits_baseElement = owned_virtual_unit_elem.getBaseElementOfVirtualUnit();
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addOwnedVirtualUnits("[%=ownedVirtualUnits_baseElement.getName()%]");
[%		
		}
		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		actuator_[%=elem.name%]_[%=actuators_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}
			    
    %]


    [%
    	actuators_counter++; 	
	}
    %]

//*************************************************
//Virtual Actuators
//*************************************************



[%   
//*************************************************
//virtual_actuators
//*************************************************
	var virtual_actuators_counter = 1;  
    for(elem in virtual_actuators){
    
%]

//*************************************************
//Virtual Actuator [%=elem.name%]
//*************************************************
		VirtualActuator virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%] = new VirtualActuator();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_actuators.add(virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]);

		VirtualActuatorWrapper virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]_wrapper = new VirtualActuatorWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_actuators_wrapper.add(virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]_wrapper);

		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]_wrapper.setVirtualActuator(virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%]_wrapper);

[%    
		var name_value = null;
		var id_value = null;
		
		var swCapabilities_stereo_applications = new Sequence; 
		var swMetrics_stereo_applications = new Sequence; 
		var virtualActuators_stereo_applications = new Sequence; 
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  

		var swCapabilities_value = new Sequence; 
		var swMetrics_value = new Sequence; 
		var virtualActuators_value = new Sequence; 
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  

		var swCapabilities_baseElement = null; 
		var swMetrics_baseElement = null; 
		var virtualActuators_baseElement = null; 
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null;  

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addId("[%=elem.id%]");
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		swCapabilities_stereo_applications = elem.getSwCapabilitiesOfVirtualActuatorAsSequence(); 
		swMetrics_stereo_applications = elem.getSwMetricsOfVirtualActuatorAsSequence();
		virtualActuators_stereo_applications = elem.getVirtualActuatorsOfVirtualActuatorAsSequence(); 
		ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfVirtualActuatorAsSequence(); 
		locations_stereo_applications = elem.getLocationOfVirtualActuatorAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfVirtualActuatorAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfVirtualActuatorAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfVirtualActuatorAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfVirtualActuatorAsSequence();  


		for (sw_capability_elem in swCapabilities_stereo_applications) {
			swCapabilities_baseElement = sw_capability_elem.getBaseElementOfSoftwareDefinedCapability();
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addSwCapabilities("[%=swCapabilities_baseElement.getName()%]");
[%	
		}
		for (sw_metric_elem in swMetrics_stereo_applications) {
			swMetrics_baseElement = sw_metric_elem.getBaseElementOfSoftwareDefinedMetric();
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addSwMetrics("[%=swMetrics_baseElement.getName()%]");
[%	
		}
		for (virtual_actuator_elem in virtualActuators_stereo_applications) {
			virtualActuators_baseElement = virtual_actuator_elem.getBaseElementOfVirtualActuator();
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addVirtualActuators("[%=virtualActuators_baseElement.getName()%]");
[%	
		}
		for (owned_virtual_unit_elem in ownedVirtualUnits_stereo_applications) {
			ownedVirtualUnits_baseElement = owned_virtual_unit_elem.getBaseElementOfVirtualUnit();
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addOwnedVirtualUnits("[%=ownedVirtualUnits_baseElement.getName()%]");
[%		
		}
		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		virtual_actuator_[%=elem.name%]_[%=virtual_actuators_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}
			    
    %]


    [%
    	virtual_actuators_counter++; 	
	}
    %]

//*************************************************
//Communications
//*************************************************



[%   
//*************************************************
//communications
//*************************************************
	var communications_counter = 1;  
    for(elem in communications){
    
%]

//*************************************************
//Communication [%=elem.name%]
//*************************************************
		Communication communication_[%=elem.name%]_[%=communications_counter%] = new Communication();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(communication_[%=elem.name%]_[%=communications_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communications.add(communication_[%=elem.name%]_[%=communications_counter%]);

		CommunicationWrapper communication_[%=elem.name%]_[%=communications_counter%]_wrapper = new CommunicationWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(communication_[%=elem.name%]_[%=communications_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communications_wrapper.add(communication_[%=elem.name%]_[%=communications_counter%]_wrapper);
[%    
		var name_value = null;
		var id_value = null;
				
		
		var communicationConfigs_stereo_applications = new Sequence;
		var ownedVirtualUnits_stereo_applications = new Sequence; 
		var locations_stereo_applications = new Sequence; 
		var descriptions_stereo_applications = new Sequence;  
		var ownedUnits_stereo_applications = new Sequence;  
		var hasTimestampMechanism_stereo_applications = new Sequence;  
		var timestampMaxLatency_stereo_applications = new Sequence;  
		var ownedVirtualUnits_stereo_applications = new Sequence;  

		var communicationConfigs_value = new Sequence;
		var ownedVirtualUnits_value = new Sequence; 
		var locations_value = new Sequence; 
		var descriptions_value = new Sequence;  
		var ownedUnits_value = new Sequence;  
		var hasTimestampMechanism_value = new Sequence;  
		var timestampMaxLatency_value = new Sequence;  
		var ownedVirtualUnits_value = new Sequence;  

		var communicationConfigs_baseElement = null;
		var ownedVirtualUnits_baseElement = null; 
		var locations_baseElement = null; 
		var descriptions_baseElement = null;  
		var ownedUnits_baseElement = null;  
		var hasTimestampMechanism_baseElement = null;  
		var timestampMaxLatency_baseElement = null;  
		var ownedVirtualUnits_baseElement = null; 
		
		 

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		communication_[%=elem.name%]_[%=communications_counter%].addId("[%=elem.id%]");
		communication_[%=elem.name%]_[%=communications_counter%].setName("[%=elem.name%]");	
[%	

	


//get and generate values from the stereotype application on the UML Model Element     
		communicationConfigs_stereo_applications = elem.getCommunicationConfigsOfCommunicationAsSequence(); 
		ownedVirtualUnits_stereo_applications = elem.getOwnedVirtualUnitsOfCommunicationAsSequence(); 
		locations_stereo_applications = elem.getLocationOfCommunicationAsSequence(); 
		descriptions_stereo_applications = elem.getDescriptionOfCommunicationAsSequence();  
		ownedUnits_stereo_applications = elem.getOwnedUnitsOfCommunicationAsSequence();  
		hasTimestampMechanism_stereo_applications = elem.getHasTimestampMechanismOfCommunicationAsSequence();  
		timestampMaxLatency_stereo_applications = elem.getTimestampMaxLatencyOfCommunicationAsSequence();  

		for (communication_config_elem in communicationConfigs_stereo_applications) {
			communicationConfigs_baseElement = communication_config_elem.getBaseElementOfCommunicationConfiguration();
%]
		communication_[%=elem.name%]_[%=communications_counter%].addCommunicationConfigs("[%=communicationConfigs_baseElement.getName()%]");
[%		
		}

		for (owned_virtual_unit_elem in ownedVirtualUnits_stereo_applications) {
			ownedVirtualUnits_baseElement = owned_virtual_unit_elem.getBaseElementOfVirtualUnit();
%]
		communication_[%=elem.name%]_[%=communications_counter%].addOwnedVirtualUnits("[%=ownedVirtualUnits_baseElement.getName()%]");
[%		
		}
		for (location_elem in locations_stereo_applications) {
			(location_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_[%=elem.name%]_[%=communications_counter%].addLocation("[%=location_elem%]");
[%		
		}
		for (description_elem in descriptions_stereo_applications) {
			(description_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_[%=elem.name%]_[%=communications_counter%].addDescription("[%=description_elem%]");
[%		
		}
		for (owned_unit_elem in ownedUnits_stereo_applications) {
			ownedUnits_baseElement = owned_unit_elem.getBaseElementOfUnit();
%]
		communication_[%=elem.name%]_[%=communications_counter%].addOwnedUnits("[%=ownedUnits_baseElement.getName()%]");
[%		
		}
		for (hasTimestampMechanism_elem in hasTimestampMechanism_stereo_applications) {
			(hasTimestampMechanism_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_[%=elem.name%]_[%=communications_counter%].addHasTimestampMechanism("[%=hasTimestampMechanism_elem%]");
[%		
		}
		for (timestampMaxLatency_elem in timestampMaxLatency_stereo_applications) {
			(timestampMaxLatency_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_[%=elem.name%]_[%=communications_counter%].addTimestampMaxLatency("[%=timestampMaxLatency_elem%]");
[%		
		}

		var memberends = elem.getCommunicationEnds();
		for (member_end_elem in memberends) {
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_[%=elem.name%]_[%=communications_counter%].addConnectionEnds("[%=member_end_elem%]");
[%		
		}			    
    %]


    [%
    	communications_counter++; 	
	}
    %]


//*************************************************
//communication_configurations
//*************************************************
[%  
	var communication_configurations_counter = 1;  
    for(elem in communication_configurations){
    	(elem).println();
%]

//*************************************************
//Communication Configuration [%=elem.name%]
//*************************************************
		CommunicationConfiguration communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%] = new CommunicationConfiguration();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communication_configurations.add(communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%]);

		CommunicationConfigurationWrapper communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%]_wrapper = new CommunicationConfigurationWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communication_configurations_wrapper.add(communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%]_wrapper);

[%    
		var name_value = null;
		var id_value = null;
				
		
		var protocolType_stereo_applications = new Sequence;
		var clientID_stereo_applications = new Sequence; 
		var serverIP_stereo_applications = new Sequence; 
		var portNumber_stereo_applications = new Sequence;  
		var topics_stereo_applications = new Sequence;  
		var qosLevel_stereo_applications = new Sequence;  
		var keepAlive_stereo_applications = new Sequence;  

		var protocolType_stereo_value = new Sequence;
		var clientID_stereo_value = new Sequence; 
		var serverIP_stereo_value = new Sequence; 
		var portNumber_stereo_value = new Sequence;  
		var topics_stereo_value = new Sequence;  
		var qosLevel_stereo_value = new Sequence;  
		var keepAlive_stereo_value = new Sequence;  
		 
		var protocolType_stereo_baseElement = null;
		var clientID_stereo_baseElement = null; 
		var serverIP_stereo_baseElement = null; 
		var portNumber_stereo_baseElement = null;  
		var topics_stereo_baseElement = null;  
		var qosLevel_stereo_baseElement = null;  
		var keepAlive_stereo_baseElement = null;  		
		 

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addId("[%=elem.id%]");
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		protocolType_stereo_applications = elem.getProtocolTypeOfCommunicationConfigurationAsSequence();
		clientID_stereo_applications = elem.getClientIDOfCommunicationConfigurationAsSequence(); 
		serverIP_stereo_applications = elem.getServerIPOfCommunicationConfigurationAsSequence(); 
		portNumber_stereo_applications = elem.getPortNumberOfCommunicationConfigurationAsSequence();  
		topics_stereo_applications = elem.getTopicsOfCommunicationConfigurationAsSequence();  
		qosLevel_stereo_applications = elem.getQosLevelOfCommunicationConfigurationAsSequence();  
		keepAlive_stereo_applications = elem.getKeepAliveOfCommunicationConfigurationAsSequence();
		
		(protocolType_stereo_applications).println();  
		for (protocol_type_elem in protocolType_stereo_applications) {
			//(protocol_type_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addProtocolType("[%=protocol_type_elem.name%]");
[%		
		}
		for (client_id_elem in clientID_stereo_applications) {
			(client_id_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addClientID("[%=client_id_elem%]");
[%		
		}	    
		for (port_number_elem in portNumber_stereo_applications) {
			(port_number_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addPortNumber("[%=port_number_elem%]");
[%		
		}	
		
		for (server_ip_elem in serverIP_stereo_applications) {
			(server_ip_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addServerIP("[%=server_ip_elem%]");
[%		
		}	
		
		for (topic_elem in topics_stereo_applications) {
			(topic_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addTopics("[%=topic_elem%]");
[%		
		}	
		
		for (qos_level_elem in qosLevel_stereo_applications) {
			(qos_level_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addQosLevel("[%=qos_level_elem%]");
[%		
		}	
		
		for (keep_alive_elem in keepAlive_stereo_applications) {
			(keep_alive_elem).println();
			//ownedVirtualUnits_baseElement = location_elem;
%]
		communication_configuration_[%=elem.name%]_[%=communication_configurations_counter%].addKeepAlive("[%=keep_alive_elem%]");
[%		
		}	
		
	%]


    [%
    	communication_configurations_counter++; 	
	}
    %]



//*************************************************
//computing_configurations
//*************************************************
[%  
	var computing_configurations_counter = 1;  
    for(elem in computing_configurations){
    	(elem).println();
%]

//*************************************************
//Computing Configuration [%=elem.name%]
//*************************************************
		ComputingConfiguration computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%] = new ComputingConfiguration();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_computing_configurations.add(computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%]);

		ComputingConfigurationWrapper computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%]_wrapper = new ComputingConfigurationWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_computing_configurations_wrapper.add(computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%]_wrapper);

[%    
		var name_value = null;
		var id_value = null;

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%].addId("[%=elem.id%]");
		computing_configuration_[%=elem.name%]_[%=computing_configurations_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		

		
	%]


    [%
    	computing_configurations_counter++; 	
	}
    %]


//*************************************************
//storage_configurations
//*************************************************
[%  
	var storage_configurations_counter = 1;  
    for(elem in storage_configurations){
    	(elem).println();
%]

//*************************************************
//Storage Configuration [%=elem.name%]
//*************************************************
		StorageConfiguration storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%] = new StorageConfiguration();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos.add(storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%]);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_storage_configurations.add(storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%]);

		StorageConfigurationWrapper storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%]_wrapper = new StorageConfigurationWrapper();
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper.add(storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%]_wrapper);
		[%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_storage_configurations_wrapper.add(storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%]_wrapper);

[%    
		var name_value = null;
		var id_value = null;
				
		
		 

//get and generate values from the UML Model Element     
    	name_value = elem.name; 
		id_value = elem.id; 

%]
		storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%].addId("[%=elem.id%]");
		storage_configuration_[%=elem.name%]_[%=storage_configurations_counter%].setName("[%=elem.name%]");	
[%	

//get and generate values from the stereotype application on the UML Model Element     
		

		
	%]

    [%
    	storage_configurations_counter++; 	
	}
    %]

	    Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String output = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos);
		String output_virtual_sensors = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_sensors);
		String output_virtual_gateways = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_gateways);
		String output_sensors = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_sensors);
		String output_actuators = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_actuators);
		String output_communications = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communications);
		String output_communication_configurations = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communication_configurations);
		String output_cloud_services = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_cloud_services);
		//System.out.println(output_virtual_sensors);
		//System.out.println(output_virtual_gateways);
		//System.out.println(output_sensors);
		//System.out.println(output_actuators);
		//System.out.println(output_communications);
		//System.out.println(output_communication_configurations);
		//System.out.println(output_cloud_services);
		System.out.println(output);
		
		//wrapper elements
		
		String output_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_pojos_wrapper);
		String output_virtual_sensors_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_sensors_wrapper);
		String output_virtual_gateways_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_virtual_gateways_wrapper);
		String output_sensors_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_sensors_wrapper);
		String output_actuators_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_actuators_wrapper);
		String output_communications_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communications_wrapper);
		String output_communication_configurations_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_communication_configurations_wrapper);
		String output_cloud_services_wrapper = gson.toJson([%=aPackage.name.replaceAll("\\s+","").firstToLowerCase()%].all_cloud_services_wrapper);
		//System.out.println(output_virtual_sensors_wrapper);
		//System.out.println(output_virtual_gateways_wrapper);
		//System.out.println(output_sensors_wrapper);
		//System.out.println(output_actuators_wrapper);
		//System.out.println(output_communications_wrapper);
		//System.out.println(output_communication_configurations_wrapper);
		//System.out.println(output_cloud_services_wrapper);
		System.out.println(output_wrapper);
	
	}
}
