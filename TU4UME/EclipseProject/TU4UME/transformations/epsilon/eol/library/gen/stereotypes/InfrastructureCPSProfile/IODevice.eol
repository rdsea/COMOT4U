
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package IODevicesAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIODevice()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Class annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package IODevicesAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassIODevice()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with IODevice.
 
operation isClassIODevice(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isIODevice() : Boolean in IODevice.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Class"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Class annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONIODevicesAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassIODevice()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype IODevice

operation IODevice getBaseClassOfIODevice() : Class{
	var baseClass = new IODevice;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype IODevice

operation IODevice JSONgetBaseClassOfIODevice() : String {
	var baseClass = new IODevice;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IODevice using native objects.
 
operation Class toJsonIODevice() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of InstanceSpecification annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package IODevicesAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationIODevice()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with IODevice.
 
operation isInstanceSpecificationIODevice(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isIODevice() : Boolean in IODevice.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "InstanceSpecification"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONIODevicesAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationIODevice()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype IODevice

operation IODevice getBaseInstanceSpecificationOfIODevice() : InstanceSpecification{
	var baseInstanceSpecification = new IODevice;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype IODevice

operation IODevice JSONgetBaseInstanceSpecificationOfIODevice() : String {
	var baseInstanceSpecification = new IODevice;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IODevice using native objects.
 
operation InstanceSpecification toJsonIODevice() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of Node annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package IODevicesAsSequenceOfNode() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodeIODevice()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with IODevice.
 
operation isNodeIODevice(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isIODevice() : Boolean in IODevice.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Node"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Node annotated with IODevice.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONIODevicesAsSequenceOfNode() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodeIODevice()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Node from the applied Stereotype IODevice

operation IODevice getBaseNodeOfIODevice() : Node{
	var baseNode = new IODevice;
	baseNode = self.base_Node;
	return baseNode;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Node from the applied Stereotype IODevice

operation IODevice JSONgetBaseNodeOfIODevice() : String {
	var baseNode = new IODevice;
	baseNode = self.base_Node;
	
	var baseNode_string = baseNode.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseNode_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IODevice using native objects.
 
operation Node toJsonIODevice() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype IODevice
 
operation IODevice getBaseElementOfIODeviceDeprecated() : Element{
	var baseElement = new IODevice;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	if(not self.base_Node.isUndefined()){
		baseElement = self.base_Node;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype IODevice using UMLUtil native object
*/ 
operation IODevice getBaseElementOfIODevice() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype IODevice using UMLUtil native object
 
//operation IODevice toJsonIODevice() : String {
operation toJsonIODevice() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with IODevice.
*/ 
operation Element isIODevice() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isIODevice() : Boolean in IODevice.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "IODevice");
}



/*
Returns a Sequence of Property defined in IODevice.
*/ 
operation IODevice getAllAttributesOfIODevice() : Sequence(Property){
	var stereotypeAttr = IODevice.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of type of stereotype IODevice.
*/ 
operation Element getTypeOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "type");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of sensors of stereotype IODevice.
*/ 
operation Element getSensorsOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "sensors");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of actuators of stereotype IODevice.
*/ 
operation Element getActuatorsOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "actuators");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedPhysicalUnits of stereotype IODevice.
*/ 
operation Element getOwnedPhysicalUnitsOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ownedPhysicalUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ioDevices of stereotype IODevice.
*/ 
operation Element getIoDevicesOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ioDevices");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of id of stereotype IODevice.
*/ 
operation Element getIdOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "id");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of location of stereotype IODevice.
*/ 
operation Element getLocationOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "location");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype IODevice.
*/ 
operation Element getDescriptionOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedUnits of stereotype IODevice.
*/ 
operation Element getOwnedUnitsOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of hasTimestampMechanism of stereotype IODevice.
*/ 
operation Element getHasTimestampMechanismOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of timestampMaxLatency of stereotype IODevice.
*/ 
operation Element getTimestampMaxLatencyOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isSafetyCritical of stereotype IODevice.
*/ 
operation Element getIsSafetyCriticalOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of infrastructureInterface of stereotype IODevice.
*/ 
operation Element getInfrastructureInterfaceOfIODeviceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of type of stereotype IODevice is empty.
*/ 
operation Element isTypeOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "type");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of sensors of stereotype IODevice is empty.
*/ 
operation Element isSensorsOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "sensors");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of actuators of stereotype IODevice is empty.
*/ 
operation Element isActuatorsOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "actuators");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedPhysicalUnits of stereotype IODevice is empty.
*/ 
operation Element isOwnedPhysicalUnitsOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ownedPhysicalUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ioDevices of stereotype IODevice is empty.
*/ 
operation Element isIoDevicesOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ioDevices");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of id of stereotype IODevice is empty.
*/ 
operation Element isIdOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "id");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of location of stereotype IODevice is empty.
*/ 
operation Element isLocationOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "location");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype IODevice is empty.
*/ 
operation Element isDescriptionOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedUnits of stereotype IODevice is empty.
*/ 
operation Element isOwnedUnitsOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of hasTimestampMechanism of stereotype IODevice is empty.
*/ 
operation Element isHasTimestampMechanismOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of timestampMaxLatency of stereotype IODevice is empty.
*/ 
operation Element isTimestampMaxLatencyOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isSafetyCritical of stereotype IODevice is empty.
*/ 
operation Element isIsSafetyCriticalOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of infrastructureInterface of stereotype IODevice is empty.
*/ 
operation Element isInfrastructureInterfaceOfIODeviceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IODevice"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getTypeProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var typeProperty = allAttributes.selectOne(s|s.name = "type");
	return typeProperty;
}


operation Stereotype getSensorsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var sensorsProperty = allAttributes.selectOne(s|s.name = "sensors");
	return sensorsProperty;
}


operation Stereotype getActuatorsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var actuatorsProperty = allAttributes.selectOne(s|s.name = "actuators");
	return actuatorsProperty;
}


operation Stereotype getOwnedPhysicalUnitsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ownedPhysicalUnitsProperty = allAttributes.selectOne(s|s.name = "ownedPhysicalUnits");
	return ownedPhysicalUnitsProperty;
}


operation Stereotype getIoDevicesProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ioDevicesProperty = allAttributes.selectOne(s|s.name = "ioDevices");
	return ioDevicesProperty;
}


operation Stereotype getIdProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var idProperty = allAttributes.selectOne(s|s.name = "id");
	return idProperty;
}


operation Stereotype getLocationProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var locationProperty = allAttributes.selectOne(s|s.name = "location");
	return locationProperty;
}


operation Stereotype getDescriptionProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var descriptionProperty = allAttributes.selectOne(s|s.name = "description");
	return descriptionProperty;
}


operation Stereotype getOwnedUnitsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ownedUnitsProperty = allAttributes.selectOne(s|s.name = "ownedUnits");
	return ownedUnitsProperty;
}


operation Stereotype getHasTimestampMechanismProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var hasTimestampMechanismProperty = allAttributes.selectOne(s|s.name = "hasTimestampMechanism");
	return hasTimestampMechanismProperty;
}


operation Stereotype getTimestampMaxLatencyProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var timestampMaxLatencyProperty = allAttributes.selectOne(s|s.name = "timestampMaxLatency");
	return timestampMaxLatencyProperty;
}


operation Stereotype getIsSafetyCriticalProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var isSafetyCriticalProperty = allAttributes.selectOne(s|s.name = "isSafetyCritical");
	return isSafetyCriticalProperty;
}


operation Stereotype getInfrastructureInterfaceProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var infrastructureInterfaceProperty = allAttributes.selectOne(s|s.name = "infrastructureInterface");
	return infrastructureInterfaceProperty;
}

