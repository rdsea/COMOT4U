
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with RecurringManifestation.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package RecurringManifestationsAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isRecurringManifestation()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Element annotated with RecurringManifestation.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package RecurringManifestationsAsSequenceOfElement() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isElementRecurringManifestation()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with RecurringManifestation.
 
operation isElementRecurringManifestation(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isRecurringManifestation() : Boolean in RecurringManifestation.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Element"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Element annotated with RecurringManifestation.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONRecurringManifestationsAsSequenceOfElement() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isElementRecurringManifestation()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Element from the applied Stereotype RecurringManifestation

operation RecurringManifestation getBaseElementOfRecurringManifestation() : Element{
	var baseElement = new RecurringManifestation;
	baseElement = self.base_Element;
	return baseElement;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Element from the applied Stereotype RecurringManifestation

operation RecurringManifestation JSONgetBaseElementOfRecurringManifestation() : String {
	var baseElement = new RecurringManifestation;
	baseElement = self.base_Element;
	
	var baseElement_string = baseElement.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype RecurringManifestation using native objects.
 
operation Element toJsonRecurringManifestation() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype RecurringManifestation
 
operation RecurringManifestation getBaseElementOfRecurringManifestationDeprecated() : Element{
	var baseElement = new RecurringManifestation;

	
	if(not self.base_Element.isUndefined()){
		baseElement = self.base_Element;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype RecurringManifestation using UMLUtil native object
*/ 
operation RecurringManifestation getBaseElementOfRecurringManifestation() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype RecurringManifestation using UMLUtil native object
 
//operation RecurringManifestation toJsonRecurringManifestation() : String {
operation toJsonRecurringManifestation() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with RecurringManifestation.
*/ 
operation Element isRecurringManifestation() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isRecurringManifestation() : Boolean in RecurringManifestation.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "RecurringManifestation");
}



/*
Returns a Sequence of Property defined in RecurringManifestation.
*/ 
operation RecurringManifestation getAllAttributesOfRecurringManifestation() : Sequence(Property){
	var stereotypeAttr = RecurringManifestation.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of occurrenceRate of stereotype RecurringManifestation.
*/ 
operation Element getOccurrenceRateOfRecurringManifestationAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "occurrenceRate");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of configuration of stereotype RecurringManifestation.
*/ 
operation Element getConfigurationOfRecurringManifestationAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "configuration");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype RecurringManifestation.
*/ 
operation Element getDescriptionOfRecurringManifestationAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of occurrenceRate of stereotype RecurringManifestation is empty.
*/ 
operation Element isOccurrenceRateOfRecurringManifestationEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "occurrenceRate");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of configuration of stereotype RecurringManifestation is empty.
*/ 
operation Element isConfigurationOfRecurringManifestationEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "configuration");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype RecurringManifestation is empty.
*/ 
operation Element isDescriptionOfRecurringManifestationEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("RecurringManifestation"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getOccurrenceRateProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var occurrenceRateProperty = allAttributes.selectOne(s|s.name = "occurrenceRate");
	return occurrenceRateProperty;
}


operation Stereotype getConfigurationProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var configurationProperty = allAttributes.selectOne(s|s.name = "configuration");
	return configurationProperty;
}


operation Stereotype getDescriptionProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var descriptionProperty = allAttributes.selectOne(s|s.name = "description");
	return descriptionProperty;
}

