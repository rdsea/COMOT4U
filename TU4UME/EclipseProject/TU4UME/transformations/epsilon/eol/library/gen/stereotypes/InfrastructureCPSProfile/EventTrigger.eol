
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EventTriggersAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEventTrigger()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Trigger annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package EventTriggersAsSequenceOfTrigger() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isTriggerEventTrigger()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with EventTrigger.
 
operation isTriggerEventTrigger(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEventTrigger() : Boolean in EventTrigger.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Trigger"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Trigger annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONEventTriggersAsSequenceOfTrigger() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isTriggerEventTrigger()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Trigger from the applied Stereotype EventTrigger

operation EventTrigger getBaseTriggerOfEventTrigger() : Trigger{
	var baseTrigger = new EventTrigger;
	baseTrigger = self.base_Trigger;
	return baseTrigger;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Trigger from the applied Stereotype EventTrigger

operation EventTrigger JSONgetBaseTriggerOfEventTrigger() : String {
	var baseTrigger = new EventTrigger;
	baseTrigger = self.base_Trigger;
	
	var baseTrigger_string = baseTrigger.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseTrigger_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EventTrigger using native objects.
 
operation Trigger toJsonEventTrigger() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of InstanceSpecification annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package EventTriggersAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationEventTrigger()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with EventTrigger.
 
operation isInstanceSpecificationEventTrigger(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEventTrigger() : Boolean in EventTrigger.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "InstanceSpecification"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONEventTriggersAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationEventTrigger()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype EventTrigger

operation EventTrigger getBaseInstanceSpecificationOfEventTrigger() : InstanceSpecification{
	var baseInstanceSpecification = new EventTrigger;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype EventTrigger

operation EventTrigger JSONgetBaseInstanceSpecificationOfEventTrigger() : String {
	var baseInstanceSpecification = new EventTrigger;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EventTrigger using native objects.
 
operation InstanceSpecification toJsonEventTrigger() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of Class annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package EventTriggersAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassEventTrigger()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with EventTrigger.
 
operation isClassEventTrigger(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEventTrigger() : Boolean in EventTrigger.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Class"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Class annotated with EventTrigger.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONEventTriggersAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassEventTrigger()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype EventTrigger

operation EventTrigger getBaseClassOfEventTrigger() : Class{
	var baseClass = new EventTrigger;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype EventTrigger

operation EventTrigger JSONgetBaseClassOfEventTrigger() : String {
	var baseClass = new EventTrigger;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EventTrigger using native objects.
 
operation Class toJsonEventTrigger() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EventTrigger
 
operation EventTrigger getBaseElementOfEventTriggerDeprecated() : Element{
	var baseElement = new EventTrigger;

	
	if(not self.base_Trigger.isUndefined()){
		baseElement = self.base_Trigger;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EventTrigger using UMLUtil native object
*/ 
operation EventTrigger getBaseElementOfEventTrigger() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EventTrigger using UMLUtil native object
 
//operation EventTrigger toJsonEventTrigger() : String {
operation toJsonEventTrigger() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with EventTrigger.
*/ 
operation Element isEventTrigger() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEventTrigger() : Boolean in EventTrigger.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EventTrigger");
}



/*
Returns a Sequence of Property defined in EventTrigger.
*/ 
operation EventTrigger getAllAttributesOfEventTrigger() : Sequence(Property){
	var stereotypeAttr = EventTrigger.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of description of stereotype EventTrigger.
*/ 
operation Element getDescriptionOfEventTriggerAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EventTrigger"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of eventSource of stereotype EventTrigger.
*/ 
operation Element getEventSourceOfEventTriggerAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EventTrigger"), "eventSource");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of description of stereotype EventTrigger is empty.
*/ 
operation Element isDescriptionOfEventTriggerEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EventTrigger"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of eventSource of stereotype EventTrigger is empty.
*/ 
operation Element isEventSourceOfEventTriggerEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EventTrigger"), "eventSource");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getDescriptionProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var descriptionProperty = allAttributes.selectOne(s|s.name = "description");
	return descriptionProperty;
}


operation Stereotype getEventSourceProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var eventSourceProperty = allAttributes.selectOne(s|s.name = "eventSource");
	return eventSourceProperty;
}

