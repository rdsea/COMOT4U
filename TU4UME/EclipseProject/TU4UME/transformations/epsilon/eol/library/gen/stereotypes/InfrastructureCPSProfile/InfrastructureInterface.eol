
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package InfrastructureInterfacesAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Interface annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package InfrastructureInterfacesAsSequenceOfInterface() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInterfaceInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with InfrastructureInterface.
 
operation isInterfaceInfrastructureInterface(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isInfrastructureInterface() : Boolean in InfrastructureInterface.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Interface"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Interface annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONInfrastructureInterfacesAsSequenceOfInterface() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInterfaceInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Interface from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface getBaseInterfaceOfInfrastructureInterface() : Interface{
	var baseInterface = new InfrastructureInterface;
	baseInterface = self.base_Interface;
	return baseInterface;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Interface from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface JSONgetBaseInterfaceOfInfrastructureInterface() : String {
	var baseInterface = new InfrastructureInterface;
	baseInterface = self.base_Interface;
	
	var baseInterface_string = baseInterface.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInterface_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype InfrastructureInterface using native objects.
 
operation Interface toJsonInfrastructureInterface() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of Class annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package InfrastructureInterfacesAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with InfrastructureInterface.
 
operation isClassInfrastructureInterface(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isInfrastructureInterface() : Boolean in InfrastructureInterface.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Class"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Class annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONInfrastructureInterfacesAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface getBaseClassOfInfrastructureInterface() : Class{
	var baseClass = new InfrastructureInterface;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface JSONgetBaseClassOfInfrastructureInterface() : String {
	var baseClass = new InfrastructureInterface;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype InfrastructureInterface using native objects.
 
operation Class toJsonInfrastructureInterface() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of Node annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package InfrastructureInterfacesAsSequenceOfNode() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodeInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with InfrastructureInterface.
 
operation isNodeInfrastructureInterface(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isInfrastructureInterface() : Boolean in InfrastructureInterface.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Node"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Node annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONInfrastructureInterfacesAsSequenceOfNode() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodeInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Node from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface getBaseNodeOfInfrastructureInterface() : Node{
	var baseNode = new InfrastructureInterface;
	baseNode = self.base_Node;
	return baseNode;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Node from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface JSONgetBaseNodeOfInfrastructureInterface() : String {
	var baseNode = new InfrastructureInterface;
	baseNode = self.base_Node;
	
	var baseNode_string = baseNode.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseNode_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype InfrastructureInterface using native objects.
 
operation Node toJsonInfrastructureInterface() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of InstanceSpecification annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package InfrastructureInterfacesAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with InfrastructureInterface.
 
operation isInstanceSpecificationInfrastructureInterface(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isInfrastructureInterface() : Boolean in InfrastructureInterface.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "InstanceSpecification"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with InfrastructureInterface.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONInfrastructureInterfacesAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationInfrastructureInterface()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface getBaseInstanceSpecificationOfInfrastructureInterface() : InstanceSpecification{
	var baseInstanceSpecification = new InfrastructureInterface;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype InfrastructureInterface

operation InfrastructureInterface JSONgetBaseInstanceSpecificationOfInfrastructureInterface() : String {
	var baseInstanceSpecification = new InfrastructureInterface;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype InfrastructureInterface using native objects.
 
operation InstanceSpecification toJsonInfrastructureInterface() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype InfrastructureInterface
 
operation InfrastructureInterface getBaseElementOfInfrastructureInterfaceDeprecated() : Element{
	var baseElement = new InfrastructureInterface;

	
	if(not self.base_Interface.isUndefined()){
		baseElement = self.base_Interface;
	}
	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_Node.isUndefined()){
		baseElement = self.base_Node;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype InfrastructureInterface using UMLUtil native object
*/ 
operation InfrastructureInterface getBaseElementOfInfrastructureInterface() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype InfrastructureInterface using UMLUtil native object
 
//operation InfrastructureInterface toJsonInfrastructureInterface() : String {
operation toJsonInfrastructureInterface() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with InfrastructureInterface.
*/ 
operation Element isInfrastructureInterface() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isInfrastructureInterface() : Boolean in InfrastructureInterface.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "InfrastructureInterface");
}



/*
Returns a Sequence of Property defined in InfrastructureInterface.
*/ 
operation InfrastructureInterface getAllAttributesOfInfrastructureInterface() : Sequence(Property){
	var stereotypeAttr = InfrastructureInterface.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of applicationInterface of stereotype InfrastructureInterface.
*/ 
operation Element getApplicationInterfaceOfInfrastructureInterfaceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("InfrastructureInterface"), "applicationInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of integrationInterface of stereotype InfrastructureInterface.
*/ 
operation Element getIntegrationInterfaceOfInfrastructureInterfaceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("InfrastructureInterface"), "integrationInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of applicationInterface of stereotype InfrastructureInterface is empty.
*/ 
operation Element isApplicationInterfaceOfInfrastructureInterfaceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("InfrastructureInterface"), "applicationInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of integrationInterface of stereotype InfrastructureInterface is empty.
*/ 
operation Element isIntegrationInterfaceOfInfrastructureInterfaceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("InfrastructureInterface"), "integrationInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getApplicationInterfaceProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var applicationInterfaceProperty = allAttributes.selectOne(s|s.name = "applicationInterface");
	return applicationInterfaceProperty;
}


operation Stereotype getIntegrationInterfaceProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var integrationInterfaceProperty = allAttributes.selectOne(s|s.name = "integrationInterface");
	return integrationInterfaceProperty;
}

