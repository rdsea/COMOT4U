
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package PhysicalUnitsAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Class annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package PhysicalUnitsAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassPhysicalUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with PhysicalUnit.
 
operation isClassPhysicalUnit(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isPhysicalUnit() : Boolean in PhysicalUnit.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Class"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Class annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONPhysicalUnitsAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassPhysicalUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype PhysicalUnit

operation PhysicalUnit getBaseClassOfPhysicalUnit() : Class{
	var baseClass = new PhysicalUnit;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype PhysicalUnit

operation PhysicalUnit JSONgetBaseClassOfPhysicalUnit() : String {
	var baseClass = new PhysicalUnit;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalUnit using native objects.
 
operation Class toJsonPhysicalUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of InstanceSpecification annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package PhysicalUnitsAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationPhysicalUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with PhysicalUnit.
 
operation isInstanceSpecificationPhysicalUnit(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isPhysicalUnit() : Boolean in PhysicalUnit.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "InstanceSpecification"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONPhysicalUnitsAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationPhysicalUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype PhysicalUnit

operation PhysicalUnit getBaseInstanceSpecificationOfPhysicalUnit() : InstanceSpecification{
	var baseInstanceSpecification = new PhysicalUnit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype PhysicalUnit

operation PhysicalUnit JSONgetBaseInstanceSpecificationOfPhysicalUnit() : String {
	var baseInstanceSpecification = new PhysicalUnit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalUnit using native objects.
 
operation InstanceSpecification toJsonPhysicalUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of Node annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package PhysicalUnitsAsSequenceOfNode() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodePhysicalUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with PhysicalUnit.
 
operation isNodePhysicalUnit(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isPhysicalUnit() : Boolean in PhysicalUnit.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Node"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Node annotated with PhysicalUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONPhysicalUnitsAsSequenceOfNode() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isNodePhysicalUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Node from the applied Stereotype PhysicalUnit

operation PhysicalUnit getBaseNodeOfPhysicalUnit() : Node{
	var baseNode = new PhysicalUnit;
	baseNode = self.base_Node;
	return baseNode;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Node from the applied Stereotype PhysicalUnit

operation PhysicalUnit JSONgetBaseNodeOfPhysicalUnit() : String {
	var baseNode = new PhysicalUnit;
	baseNode = self.base_Node;
	
	var baseNode_string = baseNode.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseNode_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalUnit using native objects.
 
operation Node toJsonPhysicalUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype PhysicalUnit
 
operation PhysicalUnit getBaseElementOfPhysicalUnitDeprecated() : Element{
	var baseElement = new PhysicalUnit;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	if(not self.base_Node.isUndefined()){
		baseElement = self.base_Node;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype PhysicalUnit using UMLUtil native object
*/ 
operation PhysicalUnit getBaseElementOfPhysicalUnit() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype PhysicalUnit using UMLUtil native object
 
//operation PhysicalUnit toJsonPhysicalUnit() : String {
operation toJsonPhysicalUnit() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with PhysicalUnit.
*/ 
operation Element isPhysicalUnit() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isPhysicalUnit() : Boolean in PhysicalUnit.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "PhysicalUnit");
}



/*
Returns a Sequence of Property defined in PhysicalUnit.
*/ 
operation PhysicalUnit getAllAttributesOfPhysicalUnit() : Sequence(Property){
	var stereotypeAttr = PhysicalUnit.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of sensors of stereotype PhysicalUnit.
*/ 
operation Element getSensorsOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "sensors");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of actuators of stereotype PhysicalUnit.
*/ 
operation Element getActuatorsOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "actuators");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedPhysicalUnits of stereotype PhysicalUnit.
*/ 
operation Element getOwnedPhysicalUnitsOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ownedPhysicalUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ioDevices of stereotype PhysicalUnit.
*/ 
operation Element getIoDevicesOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ioDevices");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of id of stereotype PhysicalUnit.
*/ 
operation Element getIdOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of location of stereotype PhysicalUnit.
*/ 
operation Element getLocationOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype PhysicalUnit.
*/ 
operation Element getDescriptionOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedUnits of stereotype PhysicalUnit.
*/ 
operation Element getOwnedUnitsOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of hasTimestampMechanism of stereotype PhysicalUnit.
*/ 
operation Element getHasTimestampMechanismOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of timestampMaxLatency of stereotype PhysicalUnit.
*/ 
operation Element getTimestampMaxLatencyOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isSafetyCritical of stereotype PhysicalUnit.
*/ 
operation Element getIsSafetyCriticalOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of infrastructureInterface of stereotype PhysicalUnit.
*/ 
operation Element getInfrastructureInterfaceOfPhysicalUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of sensors of stereotype PhysicalUnit is empty.
*/ 
operation Element isSensorsOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "sensors");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of actuators of stereotype PhysicalUnit is empty.
*/ 
operation Element isActuatorsOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "actuators");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedPhysicalUnits of stereotype PhysicalUnit is empty.
*/ 
operation Element isOwnedPhysicalUnitsOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ownedPhysicalUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ioDevices of stereotype PhysicalUnit is empty.
*/ 
operation Element isIoDevicesOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ioDevices");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of id of stereotype PhysicalUnit is empty.
*/ 
operation Element isIdOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of location of stereotype PhysicalUnit is empty.
*/ 
operation Element isLocationOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype PhysicalUnit is empty.
*/ 
operation Element isDescriptionOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedUnits of stereotype PhysicalUnit is empty.
*/ 
operation Element isOwnedUnitsOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of hasTimestampMechanism of stereotype PhysicalUnit is empty.
*/ 
operation Element isHasTimestampMechanismOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of timestampMaxLatency of stereotype PhysicalUnit is empty.
*/ 
operation Element isTimestampMaxLatencyOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isSafetyCritical of stereotype PhysicalUnit is empty.
*/ 
operation Element isIsSafetyCriticalOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of infrastructureInterface of stereotype PhysicalUnit is empty.
*/ 
operation Element isInfrastructureInterfaceOfPhysicalUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalUnit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getSensorsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var sensorsProperty = allAttributes.selectOne(s|s.name = "sensors");
	return sensorsProperty;
}


operation Stereotype getActuatorsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var actuatorsProperty = allAttributes.selectOne(s|s.name = "actuators");
	return actuatorsProperty;
}


operation Stereotype getOwnedPhysicalUnitsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ownedPhysicalUnitsProperty = allAttributes.selectOne(s|s.name = "ownedPhysicalUnits");
	return ownedPhysicalUnitsProperty;
}


operation Stereotype getIoDevicesProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ioDevicesProperty = allAttributes.selectOne(s|s.name = "ioDevices");
	return ioDevicesProperty;
}


operation Stereotype getIdProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var idProperty = allAttributes.selectOne(s|s.name = "id");
	return idProperty;
}


operation Stereotype getLocationProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var locationProperty = allAttributes.selectOne(s|s.name = "location");
	return locationProperty;
}


operation Stereotype getDescriptionProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var descriptionProperty = allAttributes.selectOne(s|s.name = "description");
	return descriptionProperty;
}


operation Stereotype getOwnedUnitsProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var ownedUnitsProperty = allAttributes.selectOne(s|s.name = "ownedUnits");
	return ownedUnitsProperty;
}


operation Stereotype getHasTimestampMechanismProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var hasTimestampMechanismProperty = allAttributes.selectOne(s|s.name = "hasTimestampMechanism");
	return hasTimestampMechanismProperty;
}


operation Stereotype getTimestampMaxLatencyProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var timestampMaxLatencyProperty = allAttributes.selectOne(s|s.name = "timestampMaxLatency");
	return timestampMaxLatencyProperty;
}


operation Stereotype getIsSafetyCriticalProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var isSafetyCriticalProperty = allAttributes.selectOne(s|s.name = "isSafetyCritical");
	return isSafetyCriticalProperty;
}


operation Stereotype getInfrastructureInterfaceProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var infrastructureInterfaceProperty = allAttributes.selectOne(s|s.name = "infrastructureInterface");
	return infrastructureInterfaceProperty;
}

