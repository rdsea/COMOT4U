
import "../../../../../eol/library/element.eol";

/*
Returns a Sequence of Element annotated with Container.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package ContainersAsSequence() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isContainer()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}


/*
Returns a Sequence of Classifier annotated with Container.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package ContainersAsSequenceOfClassifier() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassifierContainer()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with Container.
 
operation isClassifierContainer(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isContainer() : Boolean in Container.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "Classifier"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of Classifier annotated with Container.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONContainersAsSequenceOfClassifier() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isClassifierContainer()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Classifier from the applied Stereotype Container

operation Container getBaseClassifierOfContainer() : Classifier{
	var baseClassifier = new Container;
	baseClassifier = self.base_Classifier;
	return baseClassifier;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Classifier from the applied Stereotype Container

operation Container JSONgetBaseClassifierOfContainer() : String {
	var baseClassifier = new Container;
	baseClassifier = self.base_Classifier;
	
	var baseClassifier_string = baseClassifier.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClassifier_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype Container using native objects.
 
operation Classifier toJsonContainer() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/
/*
Returns a Sequence of InstanceSpecification annotated with Container.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.


operation Package ContainersAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationContainer()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

*/ 
/*
NEW NEW NEW Check if the element is annotated with Container.
 
operation isInstanceSpecificationContainer(elem : Element) : Boolean {

	if(elem.isUndefined() or elem.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isContainer() : Boolean in Container.eol");
	}
	var eclass_name = elem.type.name;
	if (eclass_name = "InstanceSpecification"){
		return true;
	}
	return false;
}
*/
/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with Container.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
 
operation Package JSONContainersAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isInstanceSpecificationContainer()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}
*/
/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype Container

operation Container getBaseInstanceSpecificationOfContainer() : InstanceSpecification{
	var baseInstanceSpecification = new Container;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype Container

operation Container JSONgetBaseInstanceSpecificationOfContainer() : String {
	var baseInstanceSpecification = new Container;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype Container using native objects.
 
operation InstanceSpecification toJsonContainer() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}
*/



/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype Container
 
operation Container getBaseElementOfContainerDeprecated() : Element{
	var baseElement = new Container;

	
	if(not self.base_Classifier.isUndefined()){
		baseElement = self.base_Classifier;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype Container using UMLUtil native object
*/ 
operation Container getBaseElementOfContainer() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype Container using UMLUtil native object
 
//operation Container toJsonContainer() : String {
operation toJsonContainer() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.tu4ume.epsilon.externaltools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}
*/

/*
Check if the element is annotated with Container.
*/ 
operation Element isContainer() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isContainer() : Boolean in Container.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "Container");
}



/*
Returns a Sequence of Property defined in Container.
*/ 
operation Container getAllAttributesOfContainer() : Sequence(Property){
	var stereotypeAttr = Container.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of location of stereotype Container.
*/ 
operation Element getLocationOfContainerAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Container"), "location");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of location of stereotype Container is empty.
*/ 
operation Element isLocationOfContainerEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Container"), "location");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}


operation Stereotype getLocationProperty() : Property {
	var allAttributes = self.getAllAttributes();
	var locationProperty = allAttributes.selectOne(s|s.name = "location");
	return locationProperty;
}

