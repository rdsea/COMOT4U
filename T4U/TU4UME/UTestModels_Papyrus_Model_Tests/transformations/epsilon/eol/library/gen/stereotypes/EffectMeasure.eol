

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Class annotated with EffectMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EffectMeasuresAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEffectMeasure()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Class annotated with EffectMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONEffectMeasuresAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEffectMeasure()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype EffectMeasure

operation EffectMeasure getBaseClassOfEffectMeasure() : Class{
	var baseClass = new EffectMeasure;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype EffectMeasure

operation EffectMeasure JSONgetBaseClassOfEffectMeasure() : String {
	var baseClass = new EffectMeasure;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EffectMeasure using native objects.
*/ 
operation Class toJsonEffectMeasure() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of DataType annotated with EffectMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EffectMeasuresAsSequenceOfDataType() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEffectMeasure()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of DataType annotated with EffectMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONEffectMeasuresAsSequenceOfDataType() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEffectMeasure()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type DataType from the applied Stereotype EffectMeasure

operation EffectMeasure getBaseDataTypeOfEffectMeasure() : DataType{
	var baseDataType = new EffectMeasure;
	baseDataType = self.base_DataType;
	return baseDataType;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type DataType from the applied Stereotype EffectMeasure

operation EffectMeasure JSONgetBaseDataTypeOfEffectMeasure() : String {
	var baseDataType = new EffectMeasure;
	baseDataType = self.base_DataType;
	
	var baseDataType_string = baseDataType.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseDataType_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EffectMeasure using native objects.
*/ 
operation DataType toJsonEffectMeasure() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EffectMeasure
 
operation EffectMeasure getBaseElementOfEffectMeasureDeprecated() : Element{
	var baseElement = new EffectMeasure;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_DataType.isUndefined()){
		baseElement = self.base_DataType;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EffectMeasure using UMLUtil native object
*/ 
operation EffectMeasure getBaseElementOfEffectMeasure() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EffectMeasure using UMLUtil native object
*/ 
//operation EffectMeasure toJsonEffectMeasure() : String {
operation toJsonEffectMeasure() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EffectMeasure.
*/ 
operation Element isEffectMeasure() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEffectMeasure() : Boolean in EffectMeasure.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EffectMeasure");
}



/*
Returns a Sequence of Property defined in EffectMeasure.
*/ 
operation EffectMeasure getAllAttributesOfEffectMeasure() : Sequence(Property){
	var stereotypeAttr = EffectMeasure.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of description of stereotype EffectMeasure.
*/ 
operation Element getDescriptionOfEffectMeasureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EffectMeasure"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of description of stereotype EffectMeasure is empty.
*/ 
operation Element isDescriptionOfEffectMeasureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EffectMeasure"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
