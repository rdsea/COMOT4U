

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Class annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package PhysicalCapabilitysAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Class annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONPhysicalCapabilitysAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype PhysicalCapability

operation PhysicalCapability getBaseClassOfPhysicalCapability() : Class{
	var baseClass = new PhysicalCapability;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype PhysicalCapability

operation PhysicalCapability JSONgetBaseClassOfPhysicalCapability() : String {
	var baseClass = new PhysicalCapability;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalCapability using native objects.
*/ 
operation Class toJsonPhysicalCapability() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of UseCase annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package PhysicalCapabilitysAsSequenceOfUseCase() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of UseCase annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONPhysicalCapabilitysAsSequenceOfUseCase() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type UseCase from the applied Stereotype PhysicalCapability

operation PhysicalCapability getBaseUseCaseOfPhysicalCapability() : UseCase{
	var baseUseCase = new PhysicalCapability;
	baseUseCase = self.base_UseCase;
	return baseUseCase;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type UseCase from the applied Stereotype PhysicalCapability

operation PhysicalCapability JSONgetBaseUseCaseOfPhysicalCapability() : String {
	var baseUseCase = new PhysicalCapability;
	baseUseCase = self.base_UseCase;
	
	var baseUseCase_string = baseUseCase.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseUseCase_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalCapability using native objects.
*/ 
operation UseCase toJsonPhysicalCapability() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of Operation annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package PhysicalCapabilitysAsSequenceOfOperation() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Operation annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONPhysicalCapabilitysAsSequenceOfOperation() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Operation from the applied Stereotype PhysicalCapability

operation PhysicalCapability getBaseOperationOfPhysicalCapability() : Operation{
	var baseOperation = new PhysicalCapability;
	baseOperation = self.base_Operation;
	return baseOperation;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Operation from the applied Stereotype PhysicalCapability

operation PhysicalCapability JSONgetBaseOperationOfPhysicalCapability() : String {
	var baseOperation = new PhysicalCapability;
	baseOperation = self.base_Operation;
	
	var baseOperation_string = baseOperation.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseOperation_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalCapability using native objects.
*/ 
operation Operation toJsonPhysicalCapability() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of InstanceSpecification annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package PhysicalCapabilitysAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with PhysicalCapability.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONPhysicalCapabilitysAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isPhysicalCapability()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype PhysicalCapability

operation PhysicalCapability getBaseInstanceSpecificationOfPhysicalCapability() : InstanceSpecification{
	var baseInstanceSpecification = new PhysicalCapability;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype PhysicalCapability

operation PhysicalCapability JSONgetBaseInstanceSpecificationOfPhysicalCapability() : String {
	var baseInstanceSpecification = new PhysicalCapability;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype PhysicalCapability using native objects.
*/ 
operation InstanceSpecification toJsonPhysicalCapability() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype PhysicalCapability
 
operation PhysicalCapability getBaseElementOfPhysicalCapabilityDeprecated() : Element{
	var baseElement = new PhysicalCapability;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_UseCase.isUndefined()){
		baseElement = self.base_UseCase;
	}
	
	if(not self.base_Operation.isUndefined()){
		baseElement = self.base_Operation;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype PhysicalCapability using UMLUtil native object
*/ 
operation PhysicalCapability getBaseElementOfPhysicalCapability() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype PhysicalCapability using UMLUtil native object
*/ 
//operation PhysicalCapability toJsonPhysicalCapability() : String {
operation toJsonPhysicalCapability() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with PhysicalCapability.
*/ 
operation Element isPhysicalCapability() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isPhysicalCapability() : Boolean in PhysicalCapability.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "PhysicalCapability");
}



/*
Returns a Sequence of Property defined in PhysicalCapability.
*/ 
operation PhysicalCapability getAllAttributesOfPhysicalCapability() : Sequence(Property){
	var stereotypeAttr = PhysicalCapability.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of description of stereotype PhysicalCapability.
*/ 
operation Element getDescriptionOfPhysicalCapabilityAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalCapability"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of id of stereotype PhysicalCapability.
*/ 
operation Element getIdOfPhysicalCapabilityAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalCapability"), "id");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of description of stereotype PhysicalCapability is empty.
*/ 
operation Element isDescriptionOfPhysicalCapabilityEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalCapability"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of id of stereotype PhysicalCapability is empty.
*/ 
operation Element isIdOfPhysicalCapabilityEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("PhysicalCapability"), "id");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
