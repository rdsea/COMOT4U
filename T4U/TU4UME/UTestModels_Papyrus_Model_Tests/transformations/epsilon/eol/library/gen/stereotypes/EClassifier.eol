

import "../../../../eol/library/element.eol";





/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EClassifier
 
operation EClassifier getBaseElementOfEClassifierDeprecated() : Element{
	var baseElement = new EClassifier;

	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EClassifier using UMLUtil native object
*/ 
operation EClassifier getBaseElementOfEClassifier() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EClassifier using UMLUtil native object
*/ 
//operation EClassifier toJsonEClassifier() : String {
operation toJsonEClassifier() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EClassifier.
*/ 
operation Element isEClassifier() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEClassifier() : Boolean in EClassifier.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EClassifier");
}



/*
Returns a Sequence of Property defined in EClassifier.
*/ 
operation EClassifier getAllAttributesOfEClassifier() : Sequence(Property){
	var stereotypeAttr = EClassifier.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of instanceClassName of stereotype EClassifier.
*/ 
operation Element getInstanceClassNameOfEClassifierAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "instanceClassName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlName of stereotype EClassifier.
*/ 
operation Element getXmlNameOfEClassifierAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of annotations of stereotype EClassifier.
*/ 
operation Element getAnnotationsOfEClassifierAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of instanceClassName of stereotype EClassifier is empty.
*/ 
operation Element isInstanceClassNameOfEClassifierEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "instanceClassName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlName of stereotype EClassifier is empty.
*/ 
operation Element isXmlNameOfEClassifierEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of annotations of stereotype EClassifier is empty.
*/ 
operation Element isAnnotationsOfEClassifierEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EClassifier"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
