

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Classifier annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package IndeterminacySourcesAsSequenceOfClassifier() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Classifier annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONIndeterminacySourcesAsSequenceOfClassifier() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Classifier from the applied Stereotype IndeterminacySource

operation IndeterminacySource getBaseClassifierOfIndeterminacySource() : Classifier{
	var baseClassifier = new IndeterminacySource;
	baseClassifier = self.base_Classifier;
	return baseClassifier;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Classifier from the applied Stereotype IndeterminacySource

operation IndeterminacySource JSONgetBaseClassifierOfIndeterminacySource() : String {
	var baseClassifier = new IndeterminacySource;
	baseClassifier = self.base_Classifier;
	
	var baseClassifier_string = baseClassifier.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClassifier_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IndeterminacySource using native objects.
*/ 
operation Classifier toJsonIndeterminacySource() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of Behavior annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package IndeterminacySourcesAsSequenceOfBehavior() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Behavior annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONIndeterminacySourcesAsSequenceOfBehavior() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Behavior from the applied Stereotype IndeterminacySource

operation IndeterminacySource getBaseBehaviorOfIndeterminacySource() : Behavior{
	var baseBehavior = new IndeterminacySource;
	baseBehavior = self.base_Behavior;
	return baseBehavior;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Behavior from the applied Stereotype IndeterminacySource

operation IndeterminacySource JSONgetBaseBehaviorOfIndeterminacySource() : String {
	var baseBehavior = new IndeterminacySource;
	baseBehavior = self.base_Behavior;
	
	var baseBehavior_string = baseBehavior.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseBehavior_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IndeterminacySource using native objects.
*/ 
operation Behavior toJsonIndeterminacySource() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of Package annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package IndeterminacySourcesAsSequenceOfPackage() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Package annotated with IndeterminacySource.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONIndeterminacySourcesAsSequenceOfPackage() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isIndeterminacySource()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Package from the applied Stereotype IndeterminacySource

operation IndeterminacySource getBasePackageOfIndeterminacySource() : Package{
	var basePackage = new IndeterminacySource;
	basePackage = self.base_Package;
	return basePackage;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Package from the applied Stereotype IndeterminacySource

operation IndeterminacySource JSONgetBasePackageOfIndeterminacySource() : String {
	var basePackage = new IndeterminacySource;
	basePackage = self.base_Package;
	
	var basePackage_string = basePackage.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(basePackage_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype IndeterminacySource using native objects.
*/ 
operation Package toJsonIndeterminacySource() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype IndeterminacySource
 
operation IndeterminacySource getBaseElementOfIndeterminacySourceDeprecated() : Element{
	var baseElement = new IndeterminacySource;

	
	if(not self.base_Classifier.isUndefined()){
		baseElement = self.base_Classifier;
	}
	
	if(not self.base_Behavior.isUndefined()){
		baseElement = self.base_Behavior;
	}
	
	if(not self.base_Package.isUndefined()){
		baseElement = self.base_Package;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype IndeterminacySource using UMLUtil native object
*/ 
operation IndeterminacySource getBaseElementOfIndeterminacySource() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype IndeterminacySource using UMLUtil native object
*/ 
//operation IndeterminacySource toJsonIndeterminacySource() : String {
operation toJsonIndeterminacySource() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with IndeterminacySource.
*/ 
operation Element isIndeterminacySource() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isIndeterminacySource() : Boolean in IndeterminacySource.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "IndeterminacySource");
}



/*
Returns a Sequence of Property defined in IndeterminacySource.
*/ 
operation IndeterminacySource getAllAttributesOfIndeterminacySource() : Sequence(Property){
	var stereotypeAttr = IndeterminacySource.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of nature of stereotype IndeterminacySource.
*/ 
operation Element getNatureOfIndeterminacySourceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "nature");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype IndeterminacySource.
*/ 
operation Element getDescriptionOfIndeterminacySourceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of indeterminacyDegree of stereotype IndeterminacySource.
*/ 
operation Element getIndeterminacyDegreeOfIndeterminacySourceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "indeterminacyDegree");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of nature of stereotype IndeterminacySource is empty.
*/ 
operation Element isNatureOfIndeterminacySourceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "nature");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype IndeterminacySource is empty.
*/ 
operation Element isDescriptionOfIndeterminacySourceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of indeterminacyDegree of stereotype IndeterminacySource is empty.
*/ 
operation Element isIndeterminacyDegreeOfIndeterminacySourceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("IndeterminacySource"), "indeterminacyDegree");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
