

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Property annotated with EAttribute.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EAttributesAsSequenceOfProperty() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEAttribute()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Property annotated with EAttribute.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONEAttributesAsSequenceOfProperty() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEAttribute()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Property from the applied Stereotype EAttribute

operation EAttribute getBasePropertyOfEAttribute() : Property{
	var baseProperty = new EAttribute;
	baseProperty = self.base_Property;
	return baseProperty;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Property from the applied Stereotype EAttribute

operation EAttribute JSONgetBasePropertyOfEAttribute() : String {
	var baseProperty = new EAttribute;
	baseProperty = self.base_Property;
	
	var baseProperty_string = baseProperty.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseProperty_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EAttribute using native objects.
*/ 
operation Property toJsonEAttribute() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EAttribute
 
operation EAttribute getBaseElementOfEAttributeDeprecated() : Element{
	var baseElement = new EAttribute;

	
	if(not self.base_Property.isUndefined()){
		baseElement = self.base_Property;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EAttribute using UMLUtil native object
*/ 
operation EAttribute getBaseElementOfEAttribute() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EAttribute using UMLUtil native object
*/ 
//operation EAttribute toJsonEAttribute() : String {
operation toJsonEAttribute() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EAttribute.
*/ 
operation Element isEAttribute() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEAttribute() : Boolean in EAttribute.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EAttribute");
}



/*
Returns a Sequence of Property defined in EAttribute.
*/ 
operation EAttribute getAllAttributesOfEAttribute() : Sequence(Property){
	var stereotypeAttr = EAttribute.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of attributeName of stereotype EAttribute.
*/ 
operation Element getAttributeNameOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "attributeName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isID of stereotype EAttribute.
*/ 
operation Element getIsIDOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isID");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isTransient of stereotype EAttribute.
*/ 
operation Element getIsTransientOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isVolatile of stereotype EAttribute.
*/ 
operation Element getIsVolatileOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isUnsettable of stereotype EAttribute.
*/ 
operation Element getIsUnsettableOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlNamespace of stereotype EAttribute.
*/ 
operation Element getXmlNamespaceOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlFeatureKind of stereotype EAttribute.
*/ 
operation Element getXmlFeatureKindOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of visibility of stereotype EAttribute.
*/ 
operation Element getVisibilityOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlName of stereotype EAttribute.
*/ 
operation Element getXmlNameOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of annotations of stereotype EAttribute.
*/ 
operation Element getAnnotationsOfEAttributeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of attributeName of stereotype EAttribute is empty.
*/ 
operation Element isAttributeNameOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "attributeName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isID of stereotype EAttribute is empty.
*/ 
operation Element isIsIDOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isID");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isTransient of stereotype EAttribute is empty.
*/ 
operation Element isIsTransientOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isVolatile of stereotype EAttribute is empty.
*/ 
operation Element isIsVolatileOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isUnsettable of stereotype EAttribute is empty.
*/ 
operation Element isIsUnsettableOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlNamespace of stereotype EAttribute is empty.
*/ 
operation Element isXmlNamespaceOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlFeatureKind of stereotype EAttribute is empty.
*/ 
operation Element isXmlFeatureKindOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of visibility of stereotype EAttribute is empty.
*/ 
operation Element isVisibilityOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlName of stereotype EAttribute is empty.
*/ 
operation Element isXmlNameOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of annotations of stereotype EAttribute is empty.
*/ 
operation Element isAnnotationsOfEAttributeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EAttribute"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
