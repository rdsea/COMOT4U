

import "../../../../eol/library/element.eol";





/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EStructuralFeature
 
operation EStructuralFeature getBaseElementOfEStructuralFeatureDeprecated() : Element{
	var baseElement = new EStructuralFeature;

	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EStructuralFeature using UMLUtil native object
*/ 
operation EStructuralFeature getBaseElementOfEStructuralFeature() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EStructuralFeature using UMLUtil native object
*/ 
//operation EStructuralFeature toJsonEStructuralFeature() : String {
operation toJsonEStructuralFeature() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EStructuralFeature.
*/ 
operation Element isEStructuralFeature() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEStructuralFeature() : Boolean in EStructuralFeature.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EStructuralFeature");
}



/*
Returns a Sequence of Property defined in EStructuralFeature.
*/ 
operation EStructuralFeature getAllAttributesOfEStructuralFeature() : Sequence(Property){
	var stereotypeAttr = EStructuralFeature.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of isTransient of stereotype EStructuralFeature.
*/ 
operation Element getIsTransientOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isVolatile of stereotype EStructuralFeature.
*/ 
operation Element getIsVolatileOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isUnsettable of stereotype EStructuralFeature.
*/ 
operation Element getIsUnsettableOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlNamespace of stereotype EStructuralFeature.
*/ 
operation Element getXmlNamespaceOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlFeatureKind of stereotype EStructuralFeature.
*/ 
operation Element getXmlFeatureKindOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of visibility of stereotype EStructuralFeature.
*/ 
operation Element getVisibilityOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlName of stereotype EStructuralFeature.
*/ 
operation Element getXmlNameOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of annotations of stereotype EStructuralFeature.
*/ 
operation Element getAnnotationsOfEStructuralFeatureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of isTransient of stereotype EStructuralFeature is empty.
*/ 
operation Element isIsTransientOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isVolatile of stereotype EStructuralFeature is empty.
*/ 
operation Element isIsVolatileOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isUnsettable of stereotype EStructuralFeature is empty.
*/ 
operation Element isIsUnsettableOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlNamespace of stereotype EStructuralFeature is empty.
*/ 
operation Element isXmlNamespaceOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlFeatureKind of stereotype EStructuralFeature is empty.
*/ 
operation Element isXmlFeatureKindOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of visibility of stereotype EStructuralFeature is empty.
*/ 
operation Element isVisibilityOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlName of stereotype EStructuralFeature is empty.
*/ 
operation Element isXmlNameOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of annotations of stereotype EStructuralFeature is empty.
*/ 
operation Element isAnnotationsOfEStructuralFeatureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EStructuralFeature"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
