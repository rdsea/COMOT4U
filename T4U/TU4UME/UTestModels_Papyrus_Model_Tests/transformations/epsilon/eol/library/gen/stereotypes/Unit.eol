

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Class annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package UnitsAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Class annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONUnitsAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype Unit

operation Unit getBaseClassOfUnit() : Class{
	var baseClass = new Unit;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype Unit

operation Unit JSONgetBaseClassOfUnit() : String {
	var baseClass = new Unit;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype Unit using native objects.
*/ 
operation Class toJsonUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of InstanceSpecification annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package UnitsAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONUnitsAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype Unit

operation Unit getBaseInstanceSpecificationOfUnit() : InstanceSpecification{
	var baseInstanceSpecification = new Unit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype Unit

operation Unit JSONgetBaseInstanceSpecificationOfUnit() : String {
	var baseInstanceSpecification = new Unit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype Unit using native objects.
*/ 
operation InstanceSpecification toJsonUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of Node annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package UnitsAsSequenceOfNode() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Node annotated with Unit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONUnitsAsSequenceOfNode() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Node from the applied Stereotype Unit

operation Unit getBaseNodeOfUnit() : Node{
	var baseNode = new Unit;
	baseNode = self.base_Node;
	return baseNode;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Node from the applied Stereotype Unit

operation Unit JSONgetBaseNodeOfUnit() : String {
	var baseNode = new Unit;
	baseNode = self.base_Node;
	
	var baseNode_string = baseNode.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseNode_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype Unit using native objects.
*/ 
operation Node toJsonUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype Unit
 
operation Unit getBaseElementOfUnitDeprecated() : Element{
	var baseElement = new Unit;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	if(not self.base_Node.isUndefined()){
		baseElement = self.base_Node;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype Unit using UMLUtil native object
*/ 
operation Unit getBaseElementOfUnit() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype Unit using UMLUtil native object
*/ 
//operation Unit toJsonUnit() : String {
operation toJsonUnit() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with Unit.
*/ 
operation Element isUnit() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isUnit() : Boolean in Unit.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "Unit");
}



/*
Returns a Sequence of Property defined in Unit.
*/ 
operation Unit getAllAttributesOfUnit() : Sequence(Property){
	var stereotypeAttr = Unit.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of id of stereotype Unit.
*/ 
operation Element getIdOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of location of stereotype Unit.
*/ 
operation Element getLocationOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype Unit.
*/ 
operation Element getDescriptionOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedUnits of stereotype Unit.
*/ 
operation Element getOwnedUnitsOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of hasTimestampMechanism of stereotype Unit.
*/ 
operation Element getHasTimestampMechanismOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of timestampMaxLatency of stereotype Unit.
*/ 
operation Element getTimestampMaxLatencyOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isSafetyCritical of stereotype Unit.
*/ 
operation Element getIsSafetyCriticalOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of infrastructureInterface of stereotype Unit.
*/ 
operation Element getInfrastructureInterfaceOfUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of id of stereotype Unit is empty.
*/ 
operation Element isIdOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of location of stereotype Unit is empty.
*/ 
operation Element isLocationOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype Unit is empty.
*/ 
operation Element isDescriptionOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedUnits of stereotype Unit is empty.
*/ 
operation Element isOwnedUnitsOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of hasTimestampMechanism of stereotype Unit is empty.
*/ 
operation Element isHasTimestampMechanismOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of timestampMaxLatency of stereotype Unit is empty.
*/ 
operation Element isTimestampMaxLatencyOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isSafetyCritical of stereotype Unit is empty.
*/ 
operation Element isIsSafetyCriticalOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of infrastructureInterface of stereotype Unit is empty.
*/ 
operation Element isInfrastructureInterfaceOfUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("Unit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
