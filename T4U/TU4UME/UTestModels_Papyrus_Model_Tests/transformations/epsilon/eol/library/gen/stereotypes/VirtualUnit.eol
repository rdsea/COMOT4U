

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Class annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package VirtualUnitsAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Class annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONVirtualUnitsAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype VirtualUnit

operation VirtualUnit getBaseClassOfVirtualUnit() : Class{
	var baseClass = new VirtualUnit;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype VirtualUnit

operation VirtualUnit JSONgetBaseClassOfVirtualUnit() : String {
	var baseClass = new VirtualUnit;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype VirtualUnit using native objects.
*/ 
operation Class toJsonVirtualUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of InstanceSpecification annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package VirtualUnitsAsSequenceOfInstanceSpecification() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of InstanceSpecification annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONVirtualUnitsAsSequenceOfInstanceSpecification() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type InstanceSpecification from the applied Stereotype VirtualUnit

operation VirtualUnit getBaseInstanceSpecificationOfVirtualUnit() : InstanceSpecification{
	var baseInstanceSpecification = new VirtualUnit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	return baseInstanceSpecification;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type InstanceSpecification from the applied Stereotype VirtualUnit

operation VirtualUnit JSONgetBaseInstanceSpecificationOfVirtualUnit() : String {
	var baseInstanceSpecification = new VirtualUnit;
	baseInstanceSpecification = self.base_InstanceSpecification;
	
	var baseInstanceSpecification_string = baseInstanceSpecification.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseInstanceSpecification_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype VirtualUnit using native objects.
*/ 
operation InstanceSpecification toJsonVirtualUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of Node annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package VirtualUnitsAsSequenceOfNode() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Node annotated with VirtualUnit.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONVirtualUnitsAsSequenceOfNode() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isVirtualUnit()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Node from the applied Stereotype VirtualUnit

operation VirtualUnit getBaseNodeOfVirtualUnit() : Node{
	var baseNode = new VirtualUnit;
	baseNode = self.base_Node;
	return baseNode;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Node from the applied Stereotype VirtualUnit

operation VirtualUnit JSONgetBaseNodeOfVirtualUnit() : String {
	var baseNode = new VirtualUnit;
	baseNode = self.base_Node;
	
	var baseNode_string = baseNode.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseNode_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype VirtualUnit using native objects.
*/ 
operation Node toJsonVirtualUnit() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype VirtualUnit
 
operation VirtualUnit getBaseElementOfVirtualUnitDeprecated() : Element{
	var baseElement = new VirtualUnit;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_InstanceSpecification.isUndefined()){
		baseElement = self.base_InstanceSpecification;
	}
	
	if(not self.base_Node.isUndefined()){
		baseElement = self.base_Node;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype VirtualUnit using UMLUtil native object
*/ 
operation VirtualUnit getBaseElementOfVirtualUnit() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype VirtualUnit using UMLUtil native object
*/ 
//operation VirtualUnit toJsonVirtualUnit() : String {
operation toJsonVirtualUnit() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with VirtualUnit.
*/ 
operation Element isVirtualUnit() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isVirtualUnit() : Boolean in VirtualUnit.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "VirtualUnit");
}



/*
Returns a Sequence of Property defined in VirtualUnit.
*/ 
operation VirtualUnit getAllAttributesOfVirtualUnit() : Sequence(Property){
	var stereotypeAttr = VirtualUnit.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of virtualActuators of stereotype VirtualUnit.
*/ 
operation Element getVirtualActuatorsOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "virtualActuators");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of virtualSensors of stereotype VirtualUnit.
*/ 
operation Element getVirtualSensorsOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "virtualSensors");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedVirtualUnits of stereotype VirtualUnit.
*/ 
operation Element getOwnedVirtualUnitsOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "ownedVirtualUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of deployedOn of stereotype VirtualUnit.
*/ 
operation Element getDeployedOnOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "deployedOn");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of id of stereotype VirtualUnit.
*/ 
operation Element getIdOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of location of stereotype VirtualUnit.
*/ 
operation Element getLocationOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of description of stereotype VirtualUnit.
*/ 
operation Element getDescriptionOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of ownedUnits of stereotype VirtualUnit.
*/ 
operation Element getOwnedUnitsOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of hasTimestampMechanism of stereotype VirtualUnit.
*/ 
operation Element getHasTimestampMechanismOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of timestampMaxLatency of stereotype VirtualUnit.
*/ 
operation Element getTimestampMaxLatencyOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isSafetyCritical of stereotype VirtualUnit.
*/ 
operation Element getIsSafetyCriticalOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of infrastructureInterface of stereotype VirtualUnit.
*/ 
operation Element getInfrastructureInterfaceOfVirtualUnitAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of virtualActuators of stereotype VirtualUnit is empty.
*/ 
operation Element isVirtualActuatorsOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "virtualActuators");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of virtualSensors of stereotype VirtualUnit is empty.
*/ 
operation Element isVirtualSensorsOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "virtualSensors");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedVirtualUnits of stereotype VirtualUnit is empty.
*/ 
operation Element isOwnedVirtualUnitsOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "ownedVirtualUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of deployedOn of stereotype VirtualUnit is empty.
*/ 
operation Element isDeployedOnOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "deployedOn");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of id of stereotype VirtualUnit is empty.
*/ 
operation Element isIdOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "id");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of location of stereotype VirtualUnit is empty.
*/ 
operation Element isLocationOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "location");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of description of stereotype VirtualUnit is empty.
*/ 
operation Element isDescriptionOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of ownedUnits of stereotype VirtualUnit is empty.
*/ 
operation Element isOwnedUnitsOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "ownedUnits");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of hasTimestampMechanism of stereotype VirtualUnit is empty.
*/ 
operation Element isHasTimestampMechanismOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "hasTimestampMechanism");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of timestampMaxLatency of stereotype VirtualUnit is empty.
*/ 
operation Element isTimestampMaxLatencyOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "timestampMaxLatency");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isSafetyCritical of stereotype VirtualUnit is empty.
*/ 
operation Element isIsSafetyCriticalOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "isSafetyCritical");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of infrastructureInterface of stereotype VirtualUnit is empty.
*/ 
operation Element isInfrastructureInterfaceOfVirtualUnitEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("VirtualUnit"), "infrastructureInterface");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
