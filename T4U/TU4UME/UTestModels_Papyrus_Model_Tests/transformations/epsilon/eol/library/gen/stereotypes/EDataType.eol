

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of PrimitiveType annotated with EDataType.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EDataTypesAsSequenceOfPrimitiveType() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEDataType()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of PrimitiveType annotated with EDataType.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONEDataTypesAsSequenceOfPrimitiveType() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEDataType()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type PrimitiveType from the applied Stereotype EDataType

operation EDataType getBasePrimitiveTypeOfEDataType() : PrimitiveType{
	var basePrimitiveType = new EDataType;
	basePrimitiveType = self.base_PrimitiveType;
	return basePrimitiveType;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type PrimitiveType from the applied Stereotype EDataType

operation EDataType JSONgetBasePrimitiveTypeOfEDataType() : String {
	var basePrimitiveType = new EDataType;
	basePrimitiveType = self.base_PrimitiveType;
	
	var basePrimitiveType_string = basePrimitiveType.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(basePrimitiveType_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EDataType using native objects.
*/ 
operation PrimitiveType toJsonEDataType() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EDataType
 
operation EDataType getBaseElementOfEDataTypeDeprecated() : Element{
	var baseElement = new EDataType;

	
	if(not self.base_PrimitiveType.isUndefined()){
		baseElement = self.base_PrimitiveType;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EDataType using UMLUtil native object
*/ 
operation EDataType getBaseElementOfEDataType() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EDataType using UMLUtil native object
*/ 
//operation EDataType toJsonEDataType() : String {
operation toJsonEDataType() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EDataType.
*/ 
operation Element isEDataType() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEDataType() : Boolean in EDataType.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EDataType");
}



/*
Returns a Sequence of Property defined in EDataType.
*/ 
operation EDataType getAllAttributesOfEDataType() : Sequence(Property){
	var stereotypeAttr = EDataType.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of dataTypeName of stereotype EDataType.
*/ 
operation Element getDataTypeNameOfEDataTypeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "dataTypeName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of instanceClassName of stereotype EDataType.
*/ 
operation Element getInstanceClassNameOfEDataTypeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "instanceClassName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlName of stereotype EDataType.
*/ 
operation Element getXmlNameOfEDataTypeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of annotations of stereotype EDataType.
*/ 
operation Element getAnnotationsOfEDataTypeAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of dataTypeName of stereotype EDataType is empty.
*/ 
operation Element isDataTypeNameOfEDataTypeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "dataTypeName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of instanceClassName of stereotype EDataType is empty.
*/ 
operation Element isInstanceClassNameOfEDataTypeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "instanceClassName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlName of stereotype EDataType is empty.
*/ 
operation Element isXmlNameOfEDataTypeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of annotations of stereotype EDataType is empty.
*/ 
operation Element isAnnotationsOfEDataTypeEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EDataType"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
