

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Property annotated with EReference.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package EReferencesAsSequenceOfProperty() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEReference()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Property annotated with EReference.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONEReferencesAsSequenceOfProperty() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isEReference()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Property from the applied Stereotype EReference

operation EReference getBasePropertyOfEReference() : Property{
	var baseProperty = new EReference;
	baseProperty = self.base_Property;
	return baseProperty;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Property from the applied Stereotype EReference

operation EReference JSONgetBasePropertyOfEReference() : String {
	var baseProperty = new EReference;
	baseProperty = self.base_Property;
	
	var baseProperty_string = baseProperty.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseProperty_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype EReference using native objects.
*/ 
operation Property toJsonEReference() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype EReference
 
operation EReference getBaseElementOfEReferenceDeprecated() : Element{
	var baseElement = new EReference;

	
	if(not self.base_Property.isUndefined()){
		baseElement = self.base_Property;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype EReference using UMLUtil native object
*/ 
operation EReference getBaseElementOfEReference() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype EReference using UMLUtil native object
*/ 
//operation EReference toJsonEReference() : String {
operation toJsonEReference() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with EReference.
*/ 
operation Element isEReference() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isEReference() : Boolean in EReference.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "EReference");
}



/*
Returns a Sequence of Property defined in EReference.
*/ 
operation EReference getAllAttributesOfEReference() : Sequence(Property){
	var stereotypeAttr = EReference.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of referenceName of stereotype EReference.
*/ 
operation Element getReferenceNameOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "referenceName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isResolveProxies of stereotype EReference.
*/ 
operation Element getIsResolveProxiesOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isResolveProxies");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of keys of stereotype EReference.
*/ 
operation Element getKeysOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "keys");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isTransient of stereotype EReference.
*/ 
operation Element getIsTransientOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isVolatile of stereotype EReference.
*/ 
operation Element getIsVolatileOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of isUnsettable of stereotype EReference.
*/ 
operation Element getIsUnsettableOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlNamespace of stereotype EReference.
*/ 
operation Element getXmlNamespaceOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlFeatureKind of stereotype EReference.
*/ 
operation Element getXmlFeatureKindOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of visibility of stereotype EReference.
*/ 
operation Element getVisibilityOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of xmlName of stereotype EReference.
*/ 
operation Element getXmlNameOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}

/*
Returns a Sequence of annotations of stereotype EReference.
*/ 
operation Element getAnnotationsOfEReferenceAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of referenceName of stereotype EReference is empty.
*/ 
operation Element isReferenceNameOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "referenceName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isResolveProxies of stereotype EReference is empty.
*/ 
operation Element isIsResolveProxiesOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isResolveProxies");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of keys of stereotype EReference is empty.
*/ 
operation Element isKeysOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "keys");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isTransient of stereotype EReference is empty.
*/ 
operation Element isIsTransientOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isTransient");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isVolatile of stereotype EReference is empty.
*/ 
operation Element isIsVolatileOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isVolatile");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of isUnsettable of stereotype EReference is empty.
*/ 
operation Element isIsUnsettableOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "isUnsettable");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlNamespace of stereotype EReference is empty.
*/ 
operation Element isXmlNamespaceOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlNamespace");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlFeatureKind of stereotype EReference is empty.
*/ 
operation Element isXmlFeatureKindOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlFeatureKind");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of visibility of stereotype EReference is empty.
*/ 
operation Element isVisibilityOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "visibility");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of xmlName of stereotype EReference is empty.
*/ 
operation Element isXmlNameOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "xmlName");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
/*
Check if a Sequence of annotations of stereotype EReference is empty.
*/ 
operation Element isAnnotationsOfEReferenceEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("EReference"), "annotations");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
