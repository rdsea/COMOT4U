

import "../../../../eol/library/element.eol";


/*
Returns a Sequence of Class annotated with BeliefDegreeMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package BeliefDegreeMeasuresAsSequenceOfClass() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isBeliefDegreeMeasure()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of Class annotated with BeliefDegreeMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONBeliefDegreeMeasuresAsSequenceOfClass() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isBeliefDegreeMeasure()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type Class from the applied Stereotype BeliefDegreeMeasure

operation BeliefDegreeMeasure getBaseClassOfBeliefDegreeMeasure() : Class{
	var baseClass = new BeliefDegreeMeasure;
	baseClass = self.base_Class;
	return baseClass;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type Class from the applied Stereotype BeliefDegreeMeasure

operation BeliefDegreeMeasure JSONgetBaseClassOfBeliefDegreeMeasure() : String {
	var baseClass = new BeliefDegreeMeasure;
	baseClass = self.base_Class;
	
	var baseClass_string = baseClass.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseClass_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype BeliefDegreeMeasure using native objects.
*/ 
operation Class toJsonBeliefDegreeMeasure() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}

/*
Returns a Sequence of DataType annotated with BeliefDegreeMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 

operation Package BeliefDegreeMeasuresAsSequenceOfDataType() : Sequence {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isBeliefDegreeMeasure()){
			returnValue.add(son);
		}
	} 
	return returnValue;
}

/*
Returns the JSON representation of a Sequence of DataType annotated with BeliefDegreeMeasure.
TODO: Currently the method does not distinguish between different UML Model Elements. All the methods SequenceOf* are equal.
*/ 
operation Package JSONBeliefDegreeMeasuresAsSequenceOfDataType() : String {
	var returnValue = new Sequence;
	for(son in self.getPackagedElements()){
		if(son.isBeliefDegreeMeasure()){
			returnValue.add(son);
		}
	} 
	
	var return_value_string = returnValue.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(return_value_string);	
	
	return jsonOutput;	
}

/* DEPRECATED THEN COMMENTED
Return the BaseElement of type DataType from the applied Stereotype BeliefDegreeMeasure

operation BeliefDegreeMeasure getBaseDataTypeOfBeliefDegreeMeasure() : DataType{
	var baseDataType = new BeliefDegreeMeasure;
	baseDataType = self.base_DataType;
	return baseDataType;
}
*/ 
/* DEPRECATED THEN COMMENTED
Return the JSON representation of the BaseElement of type DataType from the applied Stereotype BeliefDegreeMeasure

operation BeliefDegreeMeasure JSONgetBaseDataTypeOfBeliefDegreeMeasure() : String {
	var baseDataType = new BeliefDegreeMeasure;
	baseDataType = self.base_DataType;
	
	var baseDataType_string = baseDataType.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(baseDataType_string);	
	
	return jsonOutput;
}
*/ 

/*
Return the JSON String of the base element of the applied Stereotype BeliefDegreeMeasure using native objects.
*/ 
operation DataType toJsonBeliefDegreeMeasure() : String {
	var baseElement = null;
	
	var self_string = self.asString();
	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");	
	var gson = plugin.getGsonBuilder();
	var prettyprinter = gson.setPrettyPrinting().create();
	var jsonOutput = prettyprinter.toJson(self_string);	
	(jsonOutput).println();
	return jsonOutput;
}




/*DEPRECATED THEN COMMENTED
Return the BaseElement from the applied Stereotype BeliefDegreeMeasure
 
operation BeliefDegreeMeasure getBaseElementOfBeliefDegreeMeasureDeprecated() : Element{
	var baseElement = new BeliefDegreeMeasure;

	
	if(not self.base_Class.isUndefined()){
		baseElement = self.base_Class;
	}
	
	if(not self.base_DataType.isUndefined()){
		baseElement = self.base_DataType;
	}
	
	
	return baseElement;
}
*/

/*
Return the BaseElement from the applied Stereotype BeliefDegreeMeasure using UMLUtil native object
*/ 
operation BeliefDegreeMeasure getBaseElementOfBeliefDegreeMeasure() : Element{
	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	return baseElement;
}

/*
Return the JSON String from the applied Stereotype BeliefDegreeMeasure using UMLUtil native object
*/ 
//operation BeliefDegreeMeasure toJsonBeliefDegreeMeasure() : String {
operation toJsonBeliefDegreeMeasure() : String {

	var baseElement = null;

	var plugin : new Native("at.ac.tuwien.dsg.epsilon.tools.SampleTool");
	var UMLUtil = plugin.getUMLUtil();
	baseElement =UMLUtil.getBaseElement(self);
	
	var baseElement_string = baseElement.asString();
	var gson = plugin.getGson();
	gson = new GsonBuilder().setPrettyPrinting().create();
	var jsonOutput = gson.toJson(baseElement_string);	
	
	return jsonOutput;
}


/*
Check if the element is annotated with BeliefDegreeMeasure.
*/ 
operation Element isBeliefDegreeMeasure() : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: isBeliefDegreeMeasure() : Boolean in BeliefDegreeMeasure.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = "BeliefDegreeMeasure");
}



/*
Returns a Sequence of Property defined in BeliefDegreeMeasure.
*/ 
operation BeliefDegreeMeasure getAllAttributesOfBeliefDegreeMeasure() : Sequence(Property){
	var stereotypeAttr = BeliefDegreeMeasure.allAttributes();
	var returnValue : Sequence(Property) = new Sequence(Property);
	
	for(attr in stereotypeAttr){
		if(not attr.name.startsWith("base_"))
		{ 
			returnValue.add(attr);
		}
	}
	return returnValue;	
}

/*
Returns a Sequence of description of stereotype BeliefDegreeMeasure.
*/ 
operation Element getDescriptionOfBeliefDegreeMeasureAsSequence() : Sequence{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("BeliefDegreeMeasure"), "description");
	for(value in values){
		returnValues.add(value);
	}
	return returnValues;
}


/*
Check if a Sequence of description of stereotype BeliefDegreeMeasure is empty.
*/ 
operation Element isDescriptionOfBeliefDegreeMeasureEmpty() : Boolean{
	var returnValues = new Sequence;
	var values = self.getValue(self.getStereotype("BeliefDegreeMeasure"), "description");
	for(value in values){
		returnValues.add(value);
	}
	var empty = returnValues.isEmpty();
	return empty;
}
